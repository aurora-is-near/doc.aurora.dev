<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Aurora Documentation Blog</title>
        <link>https://doc.aurora.dev/blog</link>
        <description>Aurora Documentation Blog</description>
        <lastBuildDate>Wed, 22 May 2024 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>Copyright © 2025 AuroraLabs, Inc.</copyright>
        <item>
            <title><![CDATA[How to bridge liquidity to Aurora?]]></title>
            <link>https://doc.aurora.dev/blog/how-to-bridge-liquidity-to-aurora</link>
            <guid>https://doc.aurora.dev/blog/how-to-bridge-liquidity-to-aurora</guid>
            <pubDate>Wed, 22 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[We will focus on stablecoins, explain their types on Aurora, and take a look at how to bridge them in different ways from other ecosystems]]></description>
            <content:encoded><![CDATA[<p>In this article, we will discuss how to bridge liquidity to Aurora in the most convenient way. We will focus on stablecoins, explain why we have four types of these on Aurora, and take a look at how to bridge them in different ways. Note that this whole bridging process also applies to the ERC-20 tokens.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="the-global-picture--what-stables-do-we-have">The global picture – What stables do we have?<a href="https://doc.aurora.dev/blog/how-to-bridge-liquidity-to-aurora#the-global-picture--what-stables-do-we-have" class="hash-link" aria-label="Direct link to The global picture – What stables do we have?" title="Direct link to The global picture – What stables do we have?">​</a></h2>
<p>First, let’s mention three main actors here: Ethereum, Near, and Aurora blockchains. Second, we will consider the two most popular stables, USDC and USDT. To connect the ecosystem, we will use the Rainbow Bridge.<br>
<br>
<!-- -->Let’s take a look at how USDC and USDT tokens are bridged via Rainbow Bridge from Ethereum to Near:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1716383440-screenshot-2024-05-21-at-11-51-56.png" alt="" class="img_jFja"></p>
<p>As you can see, Near has the corresponding bridged versions of Ethereum’s tokens: USDC.e and USDT.e (in green), as well as the Near native <a href="https://nearblocks.io/address/17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1" target="_blank" rel="noopener noreferrer"><em>USDC</em></a> and <a href="https://nearblocks.io/address/usdt.tether-token.near" target="_blank" rel="noopener noreferrer"><em>USDT</em></a> (in blue).</p>
<p>This is needed to separate the bridged liquidity from the native one on the Near blockchain. You may also have heard about such tokens being wrapped. All these versions are interchangeable using <a href="https://app.ref.finance/#a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near%7C17208628f84f5d6ad33f0da3bbbeb27ffcb398eac501a31bd6ad2011e36133a1" target="_blank" rel="noopener noreferrer"><em>ref.finance,</em></a> on Near Protocol, as depicted by a green arrow in the image.</p>
<p>A similar story repeats with Aurora by bridging tokens from Ethereum and Near via Rainbow Bridge. So we’re getting the next picture:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1716383465-screenshot-2024-05-21-at-11-53-42.png" alt="" class="img_jFja"></p>
<p>That is why, on Aurora, we have 4 different tokens representing stables. USDC and USDT tokens are the wrapped analog for the Near native tokens. And USDC.e and USDT.e – for the Ethereum tokens. All these versions are interchangeable by using <a href="https://aurora.plus/swap" target="_blank" rel="noopener noreferrer"><em>Aurora+ Swap</em></a> feature supported by 1inch.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="how-to-transfer-liquidity-to-aurora">How to transfer liquidity to Aurora?<a href="https://doc.aurora.dev/blog/how-to-bridge-liquidity-to-aurora#how-to-transfer-liquidity-to-aurora" class="hash-link" aria-label="Direct link to How to transfer liquidity to Aurora?" title="Direct link to How to transfer liquidity to Aurora?">​</a></h2>
<p>As you have seen in the picture above, the most natural way to transfer tokens from Ethereum or Near is to use the <a href="https://rainbowbridge.app/" target="_blank" rel="noopener noreferrer"><em>Rainbow Bridge</em></a>. But we will talk about other variants too. Here is a picture summarizing the most popular ones:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1716383517-screenshot-2024-05-21-at-11-16-27.png" alt="" class="img_jFja"></p>
<p>If you have tokens on CEX that support Near, you can use <a href="https://doc.aurora.dev/launch-chain/forwarder/introduction" target="_blank" rel="noopener noreferrer">Forwarder</a>, which allows you to transfer them from CEX to your Aurora address. See Binance instructions <a href="https://doc.aurora.dev/launch-chain/forwarder/how-to-use/binance" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>For any other EVMs, you can use the <a href="https://stargate.finance/" target="_blank" rel="noopener noreferrer">Stargate</a> (coming soon) or <a href="https://meson.fi/" target="_blank" rel="noopener noreferrer">Meson</a> bridges. Stargate supports the Near Native USDC pool on Aurora. You can always <a href="https://aurora.plus/swap" target="_blank" rel="noopener noreferrer"><em>swap you tokens on Aurora+</em></a>, after bridging.<br>
<br>
<!-- -->That is it! Thank you for reading us!<br>
<!-- -->If you have any questions or suggestions, please visit our <a href="https://discord.com/invite/WXfbGsSUbT" target="_blank" rel="noopener noreferrer">Discord Community</a>!</p>]]></content:encoded>
            <category>Tutorials</category>
        </item>
        <item>
            <title><![CDATA[How to get your tokens from Bastion contracts?]]></title>
            <link>https://doc.aurora.dev/blog/hot-to-get-your-tokens-from-bastion-contract</link>
            <guid>https://doc.aurora.dev/blog/hot-to-get-your-tokens-from-bastion-contract</guid>
            <pubDate>Fri, 17 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In this article, you will learn how you can retrieve the stables from Bastion by using Aurora Explorer to call its smart contracts]]></description>
            <content:encoded><![CDATA[<p>Recently, we became aware of this issue and the lack of a way to do it in the Bastion UI, so we decided to create a tutorial for everyone to use independently. Big thanks to the people in the community who helped me create and test this tutorial and provided invaluable insights and feedback!</p>
<p>To formulate the problem more precisely, a user has some <code>cUSDCcUSDTLP</code> tokens and wants to convert these back to stables. The Bastion project's UI doesn't allow this today, so the only way is to call smart contracts directly.</p>
<p>We will go through the next steps:</p>
<ul>
<li>What contracts should we call?</li>
<li>What method should we call, and how?</li>
<li>How to convert <code>cUSDC</code> and <code>cUSDT</code> into regular stables?</li>
</ul>
<p>We will use the most convenient way for users to interact with smart contracts—the Explorer. However, devs can always write a script to perform the steps described in this article with Ethers or Web3.js.</p>
<p>Let's go!</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="what-contracts">What contracts?<a href="https://doc.aurora.dev/blog/hot-to-get-your-tokens-from-bastion-contract#what-contracts" class="hash-link" aria-label="Direct link to What contracts?" title="Direct link to What contracts?">​</a></h2>
<p>The main actor of this article will be <a href="https://explorer.aurora.dev/address/0x6287e912a9Ccd4D5874aE15d3c89556b2a05f080?tab=write_contract" target="_blank" rel="noopener noreferrer"><code>SwapFlashLoan</code> contract</a>:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715902943-screenshot-2024-05-17-at-00-39-24.png" alt="" class="img_jFja"></p>
<p>The plan is:</p>
<ol>
<li>Approve <a href="https://explorer.aurora.dev/address/0x0039f0641156cac478b0DebAb086D78B66a69a01?tab=write_proxy" target="_blank" rel="noopener noreferrer">cUSDCcUSDTLP token</a> to be used by the <code>SwapFlashLoan</code> contract.</li>
<li>Get cUSDC and cUSDT from <code>SwapFlashLoan</code>.</li>
<li>Redeem <a href="https://explorer.aurora.dev/token/0xe5308dc623101508952948b141fD9eaBd3337D99" target="_blank" rel="noopener noreferrer">cUSDC</a> and <a href="https://explorer.mainnet.aurora.dev/address/0x845E15A441CFC1871B7AC610b0E922019BaD9826" target="_blank" rel="noopener noreferrer">cUSDT</a> from their contracts to get stables.</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="approve-cusdccusdtlp">Approve cUSDCcUSDTLP<a href="https://doc.aurora.dev/blog/hot-to-get-your-tokens-from-bastion-contract#approve-cusdccusdtlp" class="hash-link" aria-label="Direct link to Approve cUSDCcUSDTLP" title="Direct link to Approve cUSDCcUSDTLP">​</a></h2>
<p>Let's start with connecting your wallet. To do this, please open <a href="https://explorer.aurora.dev/address/0x0039f0641156cac478b0DebAb086D78B66a69a01?tab=write_proxy" target="_blank" rel="noopener noreferrer">cUSDCcUSDTLP token contract</a> and click Contract -&gt; Write Contract -&gt; Connect Wallet:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715948365-screenshot-2024-05-17-at-13-19-16.png" alt="" class="img_jFja"></p>
<p>Then you will see the next popup to connect your wallet:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715903570-screenshot-2024-05-17-at-00-52-39.png" alt="" class="img_jFja"></p>
<p>We recommend using <a href="https://auroracloud.dev/pass" target="_blank" rel="noopener noreferrer">the Aurora Pass wallet</a>, which you can connect via the Wallet Connect option above and a QR code. It offers 50 free transactions a month on the Aurora blockchain and is a very user-friendly mobile wallet.</p>
<p>After connecting it, we're ready to move further.<br>
<br>
<!-- -->If you scroll down, you will see the contract methods, and here is the one we need – <code>approve</code> and enter the arguments there with <code>spender</code> being the <code>swapFlashLoan</code> contract address and <code>amount</code> equal to the number of tokens you want to get back (probably all you have right now):</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715948641-screenshot-2024-05-17-at-13-22-10.png" alt="" class="img_jFja"></p>
<p>Now, we're ready to execute the transaction, just click the "Write" button on the right and confirm it in your wallet!</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="get-cusdc-and-cusdt">Get cUSDC and cUSDT<a href="https://doc.aurora.dev/blog/hot-to-get-your-tokens-from-bastion-contract#get-cusdc-and-cusdt" class="hash-link" aria-label="Direct link to Get cUSDC and cUSDT" title="Direct link to Get cUSDC and cUSDT">​</a></h2>
<p>Let's open now the <a href="https://explorer.aurora.dev/address/0x6287e912a9Ccd4D5874aE15d3c89556b2a05f080?tab=write_contract" target="_blank" rel="noopener noreferrer"><code>SwapFlashLoan</code> contract</a>. Go to the Contract -&gt; Write Contract tab. If you scroll down, you will see the contract methods, and here is the one we need – <code>removeLiquidity</code>:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715903828-screenshot-2024-05-17-at-00-56-14.png" alt="" class="img_jFja"></p>
<p>We're unsure about the arguments here yet, so let's find out what values we should use. To do this, we will look at one such transaction, which has already been executed by someone. We need to find it in history. So here is <a href="https://explorer.aurora.dev/tx/0x0b079aee0e1feae4c10e127a5535877baee23567f22bc5293a5f885ba8d249f9" target="_blank" rel="noopener noreferrer">one</a>:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715903950-screenshot-2024-05-17-at-00-58-43.png" alt="" class="img_jFja"></p>
<p>You can see what exactly has happened here during the execution in terms of the token transfers:</p>
<ul>
<li><code>cUSDCcUSDTLP</code> tokens were burned</li>
<li><code>cUSDT</code> and <code>cUSDC</code> tokens were transferred to the caller</li>
</ul>
<p>Now, let's scroll down a bit and click on "View details" link at the left bottom of the page, you will see the arguments of the method used there:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715904026-screenshot-2024-05-17-at-00-58-57.png" alt="" class="img_jFja"></p>
<p>We can conclude by looking at the both screenshots above that:</p>
<ol>
<li><code>amount</code> argument is equal to your <code>cUSDCcUSDTLP</code> tokens amount with 18 decimals added. E.g. in this case, the user has 2021.941835489438, so the correct value should be 2021294184354893800000. You can use <a href="https://www.eth-to-wei.com/" target="_blank" rel="noopener noreferrer">this tool</a> to convert your values.</li>
<li><code>deadline</code> is your time now, with 20 minutes added to it in a timestamp format. You can use <a href="https://www.epochconverter.com/" target="_blank" rel="noopener noreferrer">the EpochConverter</a> tool to get the correct value. Just add 20 minutes to the datetime there and copy-paste the timestamp value.</li>
<li>The first value in <code>minAmounts</code> corresponds to the <code>cUSDT</code> token amount transferred back, and the second one is for the <code>cUSDC</code>. They have 8 decimals, and if you sum them up, you will get your amount of <code>cUSDCcUSDTLP</code> tokens. So you can just enter any values which in sum give you a value smaller or equal to the <code>amount</code>.</li>
</ol>
<p>We're ready to execute the method now. Just enter the correct arguments to your Explorer tab, it should look like this:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715907308-screenshot-2024-05-17-at-01-54-36.png" alt="" class="img_jFja"></p>
<p>After that, just click the "Write" button and confirm the transaction in your wallet.<br>
<!-- -->That is it! Now you got back your <code>cUSDC</code> and <code>cUSDT</code> tokens.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="how-to-convert-ctokens-to-stables">How to convert cTokens to stables?<a href="https://doc.aurora.dev/blog/hot-to-get-your-tokens-from-bastion-contract#how-to-convert-ctokens-to-stables" class="hash-link" aria-label="Direct link to How to convert cTokens to stables?" title="Direct link to How to convert cTokens to stables?">​</a></h2>
<p>To do this, we will need to point our attention to these contracts:</p>
<ul>
<li>cUSDT: <a href="https://explorer.mainnet.aurora.dev/address/0x845E15A441CFC1871B7AC610b0E922019BaD9826" target="_blank" rel="noopener noreferrer">0x845E15A441CFC1871B7AC610b0E922019BaD9826</a></li>
<li>cUSDC: <a href="https://explorer.aurora.dev/token/0xe5308dc623101508952948b141fD9eaBd3337D99" target="_blank" rel="noopener noreferrer">0xe5308dc623101508952948b141fD9eaBd3337D99</a></li>
</ul>
<p>For both of them, the process will look the same, so let's just talk about <code>cUSDT</code> case. To unwrap you need to call this method – `redeem`:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715907708-screenshot-2024-05-17-at-02-01-35.png" alt="" class="img_jFja"></p>
<p>It has only one argument, which is the amount of tokens to unwrap with 8 decimals added to it. So, for <a href="https://explorer.aurora.dev/tx/0x0b079aee0e1feae4c10e127a5535877baee23567f22bc5293a5f885ba8d249f9" target="_blank" rel="noopener noreferrer">the transaction from the previous section</a>, it should be 167994638559. It is the amount of the <code>cUSDT</code> tokens you have received after your <code>removeLiquidity</code> call.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="final-thoughts">Final thoughts<a href="https://doc.aurora.dev/blog/hot-to-get-your-tokens-from-bastion-contract#final-thoughts" class="hash-link" aria-label="Direct link to Final thoughts" title="Direct link to Final thoughts">​</a></h2>
<p>That is it – you have successfully got your <code>cUSDCcUSDTLP</code> tokens converted back to stables. If you need any help or have a similar issue, please come <a href="https://discord.com/invite/dEFJBz8HQV" target="_blank" rel="noopener noreferrer">to our Discord</a>, and we will help you! Thank you for reading!\</p>]]></content:encoded>
            <category>Tutorials</category>
        </item>
        <item>
            <title><![CDATA[Managing Aurora's Validator staking with 'near-cli-rs']]></title>
            <link>https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs</link>
            <guid>https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs</guid>
            <pubDate>Fri, 10 May 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Let's learn how to manage your staking with Near validators and claim your Aurora validator's rewards by using 'near-cli-rs']]></description>
            <content:encoded><![CDATA[<p>In this article, we will discuss how to manage your staking on the Aurora Validator. To recap quickly, Aurora is an EVM-compatible blockchain running as an L2 on the Near Protocol. In the heart of it is an Aurora Engine smart contract. That is why every transaction on Aurora is relayed to the Near and has the corresponding Near transaction. You can read more about this <a href="https://doc.aurora.dev/blog/convert-aurora-transaction-into-near-s-one"><em>here</em></a>. That is why Aurora doesn’t have its own validators – we’re just re-using the Near ones.</p>
<p>In January 2023, we re-launched <a href="https://aurora.dev/blog/aurora-relaunches-its-validator" target="_blank" rel="noopener noreferrer"><em>our validator</em></a> with a new address, <a href="https://app.mynearwallet.com/staking/aurora.pool.near" target="_blank" rel="noopener noreferrer"><em>aurora.pool.near</em></a>. What is curious about it is that it gives you the rewards in AURORA tokens directly on the Near network.</p>
<p>Recently, the <a href="https://near.org/blog/embracing-decentralization-whats-next-for-the-near-wallet" target="_blank" rel="noopener noreferrer"><em>Near Wallet was deprecated</em></a> on the 1st of January, 2024. And that has driven users to other wallets. Unfortunately, many of these don’t support staking capabilities, especially with the non-standard validator as `aurora.pool.near` is.</p>
<p>So, based on the recent support experience, we have decided to publish a guide on how to use your terminal on your laptop or PC to manage your staking on the Aurora’s Validator. Let’s look into the details now!</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="installing-near-cli-rs">Installing `near-cli-rs`<a href="https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs#installing-near-cli-rs" class="hash-link" aria-label="Direct link to Installing `near-cli-rs`" title="Direct link to Installing `near-cli-rs`">​</a></h2>
<p>Near CLI is your human-friendly companion that helps to interact with Near Protocol from the terminal right away. There are multiple ways to install it, see <a href="https://github.com/near/near-cli-rs?tab=readme-ov-file#install" target="_blank" rel="noopener noreferrer"><em>here</em></a>. I am using Mac, so I will choose the first option and execute in my Terminal:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">curl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/near-cli-rs/releases/latest/download/near-cli-rs-installer.sh | sh </span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can also run it as an npm package:</p>
<div class="language-undefined codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-undefined codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">npx near-cli-rs </span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After installation, if you execute <code>near</code> command you should be able to see this screen:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714679129-screenshot-2024-05-02-at-20-45-17.png" alt="" class="img_jFja"></p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="connecting-your-account">Connecting your account<a href="https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs#connecting-your-account" class="hash-link" aria-label="Direct link to Connecting your account" title="Direct link to Connecting your account">​</a></h2>
<p>Now, let's connect your account to the near-cli-rs. To do this, execute the near command and choose the account option, which you've seen in the previous screenshot above, using the <code>Enter</code> key.</p>
<p>You will see the next screen saying <code>What do you want to do with an account?</code>. Choose the <code>import-account</code> option there and press <code>Enter</code>:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714679473-screenshot-2024-04-26-at-12-12-20.png" alt="" class="img_jFja"></p>
<p>You will see a screen with different import options:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714679597-screenshot-2024-05-02-at-20-52-57.png" alt="" class="img_jFja"></p>
<p>Choose one that fits you! I will try to use <code>using-web-wallet</code> option. The browser window with <a href="https://app.mynearwallet.com/" target="_blank" rel="noopener noreferrer">https://app.mynearwallet.com/</a> will be opened, and you will see a popup asking for your permission to connect:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714679775-screenshot-2024-04-26-at-12-13-22.png" alt="" class="img_jFja"></p>
<p>Click the <code>Connect</code> button to approve. After that, you will need to confirm this choice by typing your full account name into the popup:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714680087-screenshot-2024-05-02-at-20-59-05.png" alt="" class="img_jFja"></p>
<p>Then, you will get the next alert about successful authorization:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714680117-screenshot-2024-05-02-at-20-59-31.png" alt="" class="img_jFja"></p>
<p>Now, you can go back to your terminal window, and you will see a message asking you to enter your account name again:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714680166-screenshot-2024-05-02-at-21-00-07.png" alt="" class="img_jFja"></p>
<p>Enter it there and press <code>Enter</code>. After that, choose a keychain to store your keys. I am choosing the first option there:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714679837-screenshot-2024-04-26-at-12-14-36.png" alt="" class="img_jFja"></p>
<p>You will get the final message that `... access key is saved in the keychain` and a console command that can replace this manual process of choosing different options in the future:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714680238-screenshot-2024-05-02-at-21-00-41.png" alt="" class="img_jFja"></p>
<p>So, all of the things we did here could be achieved also with this command:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">near account import-account using-web-wallet network-config mainnet</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That is great! As you can see, <code>near-cli-rs</code> is teaching you the terminal commands automatically while exploring it!<br>
<br>
<!-- -->You have added your Near account to <code>near-cli-rs</code>, and it is now ready to be used.<br>
<!-- -->Let's try it to stake some tokens on the Aurora Validator!</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="staking-tokens">Staking tokens<a href="https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs#staking-tokens" class="hash-link" aria-label="Direct link to Staking tokens" title="Direct link to Staking tokens">​</a></h2>
<p>TLDR: to stake your tokens, you need to use the next command:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">near staking delegation karkunow.near \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     deposit-and-stake '1 NEAR' \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     aurora.pool.near network-config mainnet \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     sign-with-keychain send</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's review the rest of the section to learn the details about how it works with <code>near-cli</code>.<br>
<br>
<!-- -->First, make sure you know what validator you will use to stake. You can check the list of validators with this command:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">near staking validator-list network-config mainnet</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>I, of course, will use <code>aurora.pool.near</code> for this demo.</p>
<p>To stake your tokens, start with executing the <code>near</code> command and choosing the <code>staking</code> option from the list:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714681089-screenshot-2024-05-02-at-21-14-10.png" alt="" class="img_jFja"></p>
<p>Now, choose <code>delegation</code>:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714681106-screenshot-2024-05-02-at-21-14-23.png" alt="" class="img_jFja"></p>
<p>And type your Near account into the console and press Enter. In my case, I have it already listed, so I will just choose mine from the list:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714681129-screenshot-2024-05-02-at-21-14-38.png" alt="" class="img_jFja"></p>
<p>After that, you need to choose <code>deposit-and-stake</code> (not just <code>stake</code> or <code>stake-all</code>, these options won't work if your tokens were not deposited to the validator yet):</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715217828-screenshot-2024-05-09-at-02-19-05.png" alt="" class="img_jFja"></p>
<p>Then, enter the amount of NEAR tokens to be staked, I am entering 1NEAR for the purpose of this demo:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715218002-screenshot-2024-05-09-at-02-15-57.png" alt="" class="img_jFja"></p>
<p>Now, type in your validator address or choose from the list (you can use the <code>tab</code> key to autocomplete):</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715218061-screenshot-2024-05-09-at-02-16-28.png" alt="" class="img_jFja"></p>
<p>Choose the network now, I will opt for the <code>mainnet</code>:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715218288-screenshot-2024-05-09-at-02-16-56.png" alt="" class="img_jFja"></p>
<p>After this, you will see your transaction formed and ready to be signed. By default, I am signing it with my keychain:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715218347-screenshot-2024-05-09-at-02-17-12.png" alt="" class="img_jFja"></p>
<p>Now, you can <code>send</code> the transaction and execute it:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715218434-screenshot-2024-05-09-at-02-17-47.png" alt="" class="img_jFja"></p>
<p>You will see the transaction ID and a link to the Explorer after the successful execution:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715218479-screenshot-2024-05-09-at-02-19-35.png" alt="" class="img_jFja"></p>
<p>We can visit the Explorer link to see the details of the transaction:</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="unstaking-tokens">Unstaking tokens<a href="https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs#unstaking-tokens" class="hash-link" aria-label="Direct link to Unstaking tokens" title="Direct link to Unstaking tokens">​</a></h2>
<p>TLDR: You just need to use the next command, which is really similar to the one used for staking:</p>
<div class="language-undefined codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-undefined codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">near staking delegation karkunow.near \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     unstake-all \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     aurora.pool.near network-config mainnet \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     sign-with-keychain send</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you don't want to unstake all the funds, just use the <code>unstake</code> option and enter the amount of NEAR tokens you want to get back.</p>
<p>Now, let's go through a few screenshots to understand better how I got this command from the <code>near-cli-rs</code>. As we have learned from the previous section, to manage our staking activities, we just execute:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">near staking delegation [your account here](your account here)</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, if you want to unstake your tokens – just choose the <code>unstake-all</code> or <code>unstake</code> option from the list:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715219903-screenshot-2024-05-09-at-02-53-21.png" alt="" class="img_jFja"></p>
<p>After that, you will be guided through the same screens as for the staking to enter the amount, validator address, network config (mainnet or testnet), and then – sign and send it. After the execution, you will see:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715219915-screenshot-2024-05-09-at-02-52-57.png" alt="" class="img_jFja"></p>
<p>Exactly the same command will be formed by <code>near-cli-rs</code> after that process. So now, you can use this shortcut instead.<br>
<br>
<!-- -->After unstaking, you will need to wait for the 4 epochs on Near blockchain to pass, which will take around 50-60 hours of time. And then, you will be ready to withdraw them and the associated rewards. The rewards will be automatically unlocked together with the unstaked tokens.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="withdrawing-tokens">Withdrawing tokens<a href="https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs#withdrawing-tokens" class="hash-link" aria-label="Direct link to Withdrawing tokens" title="Direct link to Withdrawing tokens">​</a></h2>
<p>I won't go into details with the screenshots here. Now, we're ready just to use the commands.</p>
<p>So, to withdraw your tokens and rewards, you need to execute this:</p>
<div class="language-undefined codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-undefined codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">near staking delegation karkunow.near \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     withdraw-all \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     aurora.pool.near network-config mainnet \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     sign-with-keychain send</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>If you don't want to withdraw all the funds, just use `withdraw` and enter the amount of NEAR tokens you want to withdraw.</p>
<p>After the execution, you will see:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1714681248-screenshot-2024-05-02-at-21-17-51.png" alt="" class="img_jFja"></p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="claiming-on-auroras-validator">Claiming on Aurora's validator<a href="https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs#claiming-on-auroras-validator" class="hash-link" aria-label="Direct link to Claiming on Aurora's validator" title="Direct link to Claiming on Aurora's validator">​</a></h2>
<p>Aurora's validator allows you to farm the AURORA tokens instead of NEAR by staking NEAR on it. It is based <a href="https://github.com/referencedev/staking-farm/" target="_blank" rel="noopener noreferrer">on this smart contract</a>. That is the reason why you need to use another way to claim these rewards in AURORA tokens. Can we do it with <code>near-cli-rs</code>? Yes! Let's see how it is done.<br>
<br>
<!-- -->I will use two variables to track the staking pool and account:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">export STAKINGCONTRACT=aurora.pool.near &amp;&amp; \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export MYACCOUNT=karkunow.near</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To track how much tokens you have right now in staking you should execute:</p>
<div class="language-undefined codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-undefined codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">near contract call-function as-read-only aurora.pool.near \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     'get_unclaimed_reward' json-args \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     '{"account_id":"'${MYACCOUNT}'", "farm_id":0}' \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      network-config mainnet now</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You will see the something similar to the next screen:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715334843-screenshot-2024-05-10-at-10-25-15.png" alt="" class="img_jFja"></p>
<p>The value will be in Wei, so you need to convert it to get the real value of 0.0032 AURORA by multiplying it with 10^-18.</p>
<p>To claim your rewards you need to call the <code>claim</code> method on <code>aurora.pool.near</code> contract:</p>
<div class="language-undefined codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-undefined codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">near contract call-function as-transaction aurora.pool.near \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     'claim' json-args \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     '{"account_id": "'${MYACCOUNT}'", \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       "token_id": "aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near"}' \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     prepaid-gas '100.0 Tgas' attached-deposit '1 yoctoNEAR' \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     sign-as karkunow.near /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     network-config mainnet /</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     sign-with-keychain / </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     send</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We're passing the account and NEP-141 AURORA token address to the contract's <code>claim</code> method. Also we attach 100TGas of gas and deposit 1 yoctoNear to it.</p>
<p>After the execution, you will get the transaction hash, which you can now track in the explorer:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1715335148-screenshot-2024-05-10-at-10-58-39.png" alt="" class="img_jFja"></p>
<p>That is it! You claimed your rewards from the Aurora Validator.</p>
<p>If you want to dive deeper, you can read more docs about the <code>aurora.pool.near</code> methods <a href="https://github.com/referencedev/staking-farm/blob/master/HowTo.md" target="_blank" rel="noopener noreferrer">here</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="final-thoughts">Final thoughts<a href="https://doc.aurora.dev/blog/managing-aurora-s-validator-staking-with-near-cli-rs#final-thoughts" class="hash-link" aria-label="Direct link to Final thoughts" title="Direct link to Final thoughts">​</a></h2>
<p>Thank you for reading the article! We have learned a lot today!<br>
<!-- -->We hope that <code>near-cli-rs</code> will be an indispensable tool for you while working with the Near ecosystem and that it will make it easier for you to interact with the blockchain.<br>
<!-- -->See you in the next articles!</p>]]></content:encoded>
            <category>Tutorials</category>
        </item>
        <item>
            <title><![CDATA[Plugins for smart contract devs building on Near]]></title>
            <link>https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near</link>
            <guid>https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near</guid>
            <pubDate>Fri, 19 Jan 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Let’s discover how ‘near-plugins’ library could be used by your project, and how it can save you some time during the development of your smart contracts]]></description>
            <content:encoded><![CDATA[<p>Some common functionality is required for many smart contracts. Examples are temporarily pausing certain features, staging and deploying a new version of the contract, and restricting access to contract methods. While such functionality is out of scope for an SDK like <code>near-sdk-rs</code>, ideally it is not implemented anew for every smart contract.</p>
<p>The most obvious benefits of an open-source library are reusability and the value it adds to the ecosystem. The smart contract features mentioned above can be tricky to implement and cumbersome to test. Without a library, developers might gloss over functionality that does not add business value but still is critical for security. As <code>near-plugins</code> is open-source and used by many developers, there are more engineering hours and eyeballs dedicated to it compared to a solution specific to a single smart contract.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="case-study-a-counter-managing-permissions-with-acl">Case study: A counter managing permissions with ACL<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#case-study-a-counter-managing-permissions-with-acl" class="hash-link" aria-label="Direct link to Case study: A counter managing permissions with ACL" title="Direct link to Case study: A counter managing permissions with ACL">​</a></h2>
<p>Let’s look at a case study to see how <code>near-plugins</code> can be useful to smart contract developers. We are building a <code>Counter</code> that stores its current value and has methods to increment, decrement, and reset the value. It is intentionally kept simple to allow us to focus on how <code>near-plugins</code> adds functionality. This is what the contract looks like prior to using any plugins:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">Counter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[init]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Anyone can retrieve the current value.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">i64</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Increases the value of the counter by one.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">increment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Decreases the value of the counter by one.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">decrement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">-=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Resets the value of the counter to zero.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">reset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The final version of the code is available <a href="https://github.com/mooori/counter-acl-example" target="_blank" rel="noopener noreferrer"><em>in this repository on github</em></a>. The <em><code>Counter</code></em> example is inspired by <a href="https://github.com/near-examples/counter-rust" target="_blank" rel="noopener noreferrer"><em>near-examples/counter-rust</em></a>.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="permissions">Permissions<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#permissions" class="hash-link" aria-label="Direct link to Permissions" title="Direct link to Permissions">​</a></h3>
<p>The contract methods defined above can be called by anyone since they are public and inside an implementation block marked with <code>#[near_bindgen]</code>. Using <code>near-sdk-rs</code> it is possible to restrict some methods such that they can be called only by the contract itself. Either by using <code>#[private]</code> or by not exposing the method publicly, as described in the <a href="https://docs.near.org/sdk/rust/contract-interface/private-methods" target="_blank" rel="noopener noreferrer">documentation</a>.</p>
<p>However, what if we wanted to implement more flexible permissions (e.g. allowing only some set of accounts to call a given function)? This is where the <a href="https://github.com/aurora-is-near/near-plugins#accesscontrollable" target="_blank" rel="noopener noreferrer"><code>AccessControllable</code></a> plugin comes in handy.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="managing-permissions-with-acl">Managing permissions with ACL<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#managing-permissions-with-acl" class="hash-link" aria-label="Direct link to Managing permissions with ACL" title="Direct link to Managing permissions with ACL">​</a></h3>
<p>ACL stands for <em>access control lists</em> and they are used in the following way within the <code>AccessControllable</code> plugin. The user defines the roles required for their use case as Rust enum variants. Then it is possible to restrict access to a method to accounts that have been granted roles. Restricting access is possible with one line of code, for example:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[access_control_any(roles(Role::Decrementer))]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">decrement</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let’s walk through it step by step to see how you can make your Near smart contract <code>AccessControllable</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="step-1-add-near-plugins-as-a-dependency">Step 1: Add <code>near-plugins</code> as a dependency<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#step-1-add-near-plugins-as-a-dependency" class="hash-link" aria-label="Direct link to step-1-add-near-plugins-as-a-dependency" title="Direct link to step-1-add-near-plugins-as-a-dependency">​</a></h3>
<p>For now, <code>near-plugins</code> has not yet been published on crates.io. Still, the crate is ready for usage and it can be added as git dependency:</p>
<div class="language-toml codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-toml codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain"># Add `near-plugins` under `dependencies` in your Cargo.toml.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[dependencies]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">near-plugins = { git = "https://github.com/aurora-is-near/near-plugins.git", tag = "v0.2.0" }</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="step-2-define-roles">Step 2: Define roles<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#step-2-define-roles" class="hash-link" aria-label="Direct link to Step 2: Define roles" title="Direct link to Step 2: Define roles">​</a></h3>
<p>Every use case may require a different set of roles, so users may define their roles as variants of an enum. For the <code>Counter</code> example, we define the following roles:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[derive(AccessControlRole, Deserialize, Serialize, Copy, Clone)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[serde(crate = </span><span class="token attribute attr-name string" style="color:#e3116c">"near_sdk::serde"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">enum</span><span class="token plain"> </span><span class="token type-definition class-name">Role</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Grantees of this role may decrease the counter.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Decrementer</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Grantees of this role may reset the counter.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Resetter</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Deriving the <code>AccessControlRole</code> trait prepares the <code>Role</code> enum for usage in the <code>AccessControllable</code> plugin.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="step-3-make-the-contract-accesscontrollable">Step 3: Make the contract <code>AccessControllable</code><a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#step-3-make-the-contract-accesscontrollable" class="hash-link" aria-label="Direct link to step-3-make-the-contract-accesscontrollable" title="Direct link to step-3-make-the-contract-accesscontrollable">​</a></h3>
<p>The contract is made <code>AccessControllable</code> by attaching the <code>access_control</code> attribute macro on the definition of the struct which represents the contract’s state. We pass our <code>Role</code> as argument to make the <code>AccessControllable</code> implementation aware of it:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[access_control(role_type(Role))]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(PanicOnDefault, BorshDeserialize, BorshSerialize)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Counter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">i64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="step-4-restrict-contract-methods">Step 4: Restrict contract methods<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#step-4-restrict-contract-methods" class="hash-link" aria-label="Direct link to Step 4: Restrict contract methods" title="Direct link to Step 4: Restrict contract methods">​</a></h3>
<p>Access to a contract method is restricted by attaching <code>#[access_control_any]</code> and providing the roles to be whitelisted as arguments:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">Counter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// We must be inside an implementation block with `#[near-bindgen]`.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Resets the value of the counter to zero.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">///</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// Only accounts that have been granted `Role::Resetter` may successfully call this method.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// If called by an account without this role, the method panics and state remains unchanged.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[access_control_any(roles(Role::Resetter))]</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// enables ACL for this method</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">reset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">value </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// By the way, it is also possible to restrict access to accounts that have been granted any of</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">/// multiple roles. This is how the syntax looks.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[access_control_any(roles(Role::Decrementer, Role::Resetter))]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">no_op</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now the contract is set up for access control. The only step that is missing is granting roles to accounts, enabling them to call restricted methods.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="step-5-grant-permissions">Step 5: Grant permissions<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#step-5-grant-permissions" class="hash-link" aria-label="Direct link to Step 5: Grant permissions" title="Direct link to Step 5: Grant permissions">​</a></h3>
<p>In our contract’s constructor method <code>new()</code> we make the contract itself super admin:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token namespace" style="opacity:0.7">near_sdk</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">require!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    contract</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">acl_init_super_admin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token namespace" style="opacity:0.7">env</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">current_account_id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"Failed to initialize super admin"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>AccessControllable</code> super admin is an admin for every role defined in the <code>Role</code> enum. For this example, it is sufficient to know that a super admin may grant and revoke every role. Making the contract itself super admin facilitates the setup procedure as well as testing. More detailed information on admin roles can be found in the <a href="https://github.com/aurora-is-near/near-plugins/blob/master/near-plugins/src/access_controllable.rs" target="_blank" rel="noopener noreferrer">documentation</a> of the <code>AccessControllable</code> trait.</p>
<p>To grant the <code>Resetter</code> role to the account <code>alice.near</code>, the contract can call the following function on itself:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">/// See `AccessControllable::acl_grant_role` for details.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">acl_grant_role</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Resetter"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"alice.near"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>AccessControllable</code> trait provides many more methods to administer ACL permissions. After following the steps above, all of them are automatically implemented for a contract using the <code>AccessControllable</code> plugin.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="done">Done<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#done" class="hash-link" aria-label="Direct link to Done" title="Direct link to Done">​</a></h2>
<p>The steps above are sufficient to add complex and configurable ACL permissions to a contract using <code>near-plugins</code>. At this point, <code>alice.near</code> is the only account which has been granted the <code>Resetter</code> role. This means that only <code>alice.near</code> may successfully call the contract’s <code>reset()</code> method.</p>
<p>The repo contains an <a href="https://github.com/mooori/counter-acl-example/blob/main/tests/workflow.rs" target="_blank" rel="noopener noreferrer">integration test</a> which verifies that <code>AccessControllable</code> was set up correctly for our <code>Counter</code> contract. Take a look at it to learn more about interacting with an <code>AccessControllable</code> contract. To run the test on-chain in a local sandbox, it suffices to clone the repo and execute the following command. This is made possible by <a href="https://github.com/near/near-workspaces-rs" target="_blank" rel="noopener noreferrer">near-workspaces-rs</a>.</p>
<div class="language-undefined codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-undefined codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">cargo test</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="teaser-how-it-works-internally">Teaser: How it works internally<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#teaser-how-it-works-internally" class="hash-link" aria-label="Direct link to Teaser: How it works internally" title="Direct link to Teaser: How it works internally">​</a></h2>
<p>Using <code>AccessControllable</code> extends the contract state to store the permissions that have been granted. Moreover, the <code>AccessControllable</code> trait is implemented for the contract to enable administering permissions. When <code>#[access_control_any(roles(...))]</code> is attached to a method, <code>near-plugin</code> injects code that checks if the caller was granted any of the required roles. If not, a panic is generated which aborts the function call.</p>
<p>To learn about all the details, you can dive into the <a href="https://github.com/aurora-is-near/near-plugins/blob/master/near-plugins-derive/src/access_controllable.rs" target="_blank" rel="noopener noreferrer">implementation</a> of the <code>AccessControllable</code> macro.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="a-note-on-testing">A note on testing<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#a-note-on-testing" class="hash-link" aria-label="Direct link to A note on testing" title="Direct link to A note on testing">​</a></h2>
<p>The functionality provided by <code>near-plugins</code> is critical for security and we strive to test it exhaustively. In tests, we compile demo contracts for all plugins and deploy them on-chain in a local sandbox. Then we verify that using a particular plugin adds exactly the expected functionality to the contract. These tests and demo contracts can be found <a href="https://github.com/aurora-is-near/near-plugins/tree/master/near-plugins-derive/tests" target="_blank" rel="noopener noreferrer">here</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="ready-for-production-though">Ready for production, though?<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#ready-for-production-though" class="hash-link" aria-label="Direct link to Ready for production, though?" title="Direct link to Ready for production, though?">​</a></h2>
<p>As mentioned earlier, <code>near-plugins</code> comes with the caveat of not yet being published to <em>crates.io</em>. Nevertheless, it is already used in some contracts on mainnet, e.g. contracts related to the <a href="https://rainbowbridge.app/transfer" target="_blank" rel="noopener noreferrer">Rainbow Bridge</a>. Moreover, both <a href="https://www.datocms-assets.com/50156/1680101850-hacken-near-plugins-final-report-updated-march2023.pdf" target="_blank" rel="noopener noreferrer">Hacken</a> and <a href="https://www.datocms-assets.com/50156/1680590522-auditone-near-plugins-final-report-updated-march2023.pdf" target="_blank" rel="noopener noreferrer">AuditOne</a> audited <code>near-plugins</code>, awarding it high scores.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="conclusion">Conclusion<a href="https://doc.aurora.dev/blog/plugins-for-smart-contract-devs-building-on-near#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>Using <code>near-plugins</code>, developers can add complex functionality to their smart contracts with just a few lines of code. Developers can focus on creating value for their users by relying on <code>near-plugins</code> for some cumbersome administrative tasks that are nevertheless critical for security. We are testing all plugins extensively and the <code>near-plugins</code> crate has been audited twice. We hope to contribute to the Near ecosystem by providing secure smart contract plugins which developers can build upon.</p>
<p>This article provides a step-by-step guide to using the <code>AccessControllable</code> plugin. In principle, using other plugins is similar. Head over to the <a href="https://github.com/aurora-is-near/near-plugins" target="_blank" rel="noopener noreferrer">repository</a> and have a look at the documentation and tests to get started with other plugins.</p>]]></content:encoded>
            <category>Tutorials</category>
        </item>
        <item>
            <title><![CDATA[Contract Callbacks in XCC]]></title>
            <link>https://doc.aurora.dev/blog/contract-callbacks-in-xcc</link>
            <guid>https://doc.aurora.dev/blog/contract-callbacks-in-xcc</guid>
            <pubDate>Fri, 17 Nov 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[In this post we focus on the need to refund tokens to a user in the event of an error. This will reveal a bit of a “gotcha” which developers new to the XCC may come across, and we’ll discuss how to overcome it]]></description>
            <content:encoded><![CDATA[<p>In previous posts, we have written about the cross-contract calls (XCC) feature on Aurora. These include <a href="https://doc.aurora.dev/blog/cross-ecosystem-communication"><em>an overview</em></a>, <a href="https://doc.aurora.dev/blog/building-a-game-using-near-aurora-and-bos"><em>an application</em></a>, and a <a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing"><em>deep dive into writing tests</em></a>.</p>
<p>In this post, we continue with the XCC technical deep dive by discussing in more detail handling XCC results using callbacks. In particular, we focus on the concrete example of needing to refund tokens to a user in the event of an error. Along the way, this example will reveal a bit of a “gotcha” which developers new to the XCC feature may come across, and we’ll discuss how to overcome it.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="the-scenario">The Scenario<a href="https://doc.aurora.dev/blog/contract-callbacks-in-xcc#the-scenario" class="hash-link" aria-label="Direct link to The Scenario" title="Direct link to The Scenario">​</a></h2>
<p>This scenario comes from <a href="https://github.com/aurora-is-near/aurora-contracts-sdk/tree/76cb2f4f5932b5b9dd887834e1f7528cdeb1837c/examples/ft-refund" target="_blank" rel="noopener noreferrer"><em>an example</em></a> present in the Aurora Contracts SDK. In the example, we suppose there is a contract for some Near app, A, which works with a <a href="https://nomicon.io/Standards/Tokens/FungibleToken/Core" target="_blank" rel="noopener noreferrer"><em>NEP-141</em></a> token, T, that has also been bridged to Aurora.</p>
<p>Our goal is to use XCC to allow Aurora users to interact with A using the ERC-20 version of T tokens they have on Aurora. We specifically want to handle the case where if there is an error in A, then the tokens are automatically returned to the user’s address on Aurora.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="the-contracts">The Contracts<a href="https://doc.aurora.dev/blog/contract-callbacks-in-xcc#the-contracts" class="hash-link" aria-label="Direct link to The Contracts" title="Direct link to The Contracts">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="the-nep-141-token-t">The NEP-141 Token T<a href="https://doc.aurora.dev/blog/contract-callbacks-in-xcc#the-nep-141-token-t" class="hash-link" aria-label="Direct link to The NEP-141 Token T" title="Direct link to The NEP-141 Token T">​</a></h3>
<p>This is a totally standard <a href="https://nomicon.io/Standards/Tokens/FungibleToken/Core" target="_blank" rel="noopener noreferrer"><em>NEP-141</em></a> token done with the <a href="https://docs.rs/near-contract-standards/latest/near_contract_standards/fungible_token/index.html" target="_blank" rel="noopener noreferrer"><em>reference implementation</em></a>. The only thing to say about this is that the mint function is public for the sake of the example.</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(BorshSerialize, BorshDeserialize, PanicOnDefault)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Contract</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    symbol</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    decimals</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u8</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    token</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">FungibleToken</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">Contract</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[init]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> symbol</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> decimals</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u8</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            name</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            symbol</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            decimals</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            token</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">FungibleToken</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">b"t"</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_vec</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[payable]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">mint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> account_id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">U128</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">internal_deposit</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">account_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">burn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> account_id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">U128</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">internal_withdraw</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">account_id</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">near_contract_standards</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">impl_fungible_token_core!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Contract</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> token</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token namespace" style="opacity:0.7">near_contract_standards</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token macro property" style="color:#36acaa">impl_fungible_token_storage!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Contract</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> token</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="the-near-app-contract-a">The Near App Contract A<a href="https://doc.aurora.dev/blog/contract-callbacks-in-xcc#the-near-app-contract-a" class="hash-link" aria-label="Direct link to The Near App Contract A" title="Direct link to The Near App Contract A">​</a></h3>
<p>This is a very simple contract which only implements the ft_on_transfer function from the NEP-141 spec, thus allowing it to receive T tokens. The implementation of that function is also simple. It either accepts all the tokens or if the attached message is <code>refund</code> then it sends back all the tokens minus a small fee. This “refund” case is what we will focus on since it is in that situation that the returned tokens need to be given back to the user’s address on Aurora.</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// A fee that is taken from amounts that are requested to be refunded.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">FEE</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u128</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">77</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(BorshDeserialize, BorshSerialize, Default)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">FtRefund</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">FungibleTokenReceiver</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token class-name">FtRefund</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">ft_on_transfer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        sender_id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        amount</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">U128</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        msg</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">PromiseOrValue</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">U128</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">msg </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"refund"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> return_amount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> amount</span><span class="token number" style="color:#36acaa">.0</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">saturating_sub</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">FEE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">PromiseOrValue</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">U128</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">return_amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">PromiseOrValue</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">into</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="the-solidity-contract">The Solidity Contract<a href="https://doc.aurora.dev/blog/contract-callbacks-in-xcc#the-solidity-contract" class="hash-link" aria-label="Direct link to The Solidity Contract" title="Direct link to The Solidity Contract">​</a></h3>
<p>This contract uses the XCC feature to allow Aurora users to interact with the Near App Contract. The main entry point is ftTransferCall which takes as input the address of an ERC-20 token bridged from a NEP-141 token, the Near account name of that NEP-141 token, and an amount of tokens. The contract takes the user’s ERC-20 token on Aurora, bridges them back as NEP-141 tokens on its XCC account on Near, and then uses that account to send the NEP-141 tokens to the Near App Contract via <code>ft_transfer_call</code>.</p>
<div class="language-solidity codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-solidity codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ftTransferCall</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    IEvmErc20 token</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> tokenId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">uint128</span><span class="token plain"> amount</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">transferFrom</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sender</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">withdrawToNear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        abi</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">encodePacked</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">AuroraSdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">nearRepresentative</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin">uint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">bytes</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> abi</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">encodePacked</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"{"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">'"receiver_id": "'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        nearAccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">'",'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">'"amount": "'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Strings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">'",'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">'"msg": "refund"'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"}"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PromiseCreateArgs </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> callFtTransfer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> near</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        tokenId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token string" style="color:#e3116c">"ft_transfer_call"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        FT_TRANSFER_CALL_NEAR_GAS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PromiseCreateArgs </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> callback </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> near</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">auroraCall</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin">address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        abi</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">encodeWithSelector</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ftTransferCallCallback</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">selector</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            msg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sender</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tokenId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            amount</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        CALLBACK_NEAR_GAS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    callFtTransfer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">then</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">callback</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">transact</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>There is also a callback for this function which handles the result of that XCC call. The callback is defined in the function ftTransferCallCallback. The logic of this function is to check if there are any tokens that need to be returned to the user on Aurora, and if there are, bridge them back to the user’s address using another ft_transfer_call from the NEP-141 token to Aurora.</p>
<div class="language-solidity codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-solidity codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ftTransferCallCallback</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">address</span><span class="token plain"> sender</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> tokenIdOnNear</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">uint128</span><span class="token plain"> amount</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">onlyRole</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">CALLBACK_ROLE</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PromiseResult </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> promiseResult </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> AuroraSdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">promiseResult</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">uint128</span><span class="token plain"> refundAmount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">promiseResult</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> PromiseResultStatus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Successful</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// if Promise failed we need to do whole refund</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        refundAmount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> amount</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// else `ft_resolve_transfer` will return used amount of FT,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// which we need to extract from original amount</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin">uint128</span><span class="token plain"> usedAmount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">_stringToUint</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">promiseResult</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">output</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        refundAmount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> amount </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> usedAmount</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">refundAmount </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin">bytes</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> data </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> abi</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">encodePacked</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"{"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">'"receiver_id": "'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            AuroraSdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">currentAccountId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">'",'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">'"amount": "'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            Strings</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">refundAmount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">'",'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">'"msg": "'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token function" style="color:#d73a49">_toHexString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">uint160</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">sender</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">'"}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PromiseCreateArgs </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> callFtTransfer </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> near</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            tokenIdOnNear</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"ft_transfer_call"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            REFUND_NEAR_GAS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        callFtTransfer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">transact</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="the-trap">The Trap<a href="https://doc.aurora.dev/blog/contract-callbacks-in-xcc#the-trap" class="hash-link" aria-label="Direct link to The Trap" title="Direct link to The Trap">​</a></h2>
<p>So far so good, everything looks straightforward. But this is where we hit a small “gotcha”. The NEP-141 token standard requires attaching 1 yoctoNEAR to ft_transfer_call. This means not only is ftTransferCall spending 1 yoctoNEAR, but so is ftTransferCallCallback in the case that a refund is needed. Someone needs to pay for this cost, and the Aurora Contact SDK <a href="https://github.com/aurora-is-near/aurora-contracts-sdk/blob/76cb2f4f5932b5b9dd887834e1f7528cdeb1837c/aurora-solidity-sdk/src/AuroraSdk.sol#L142" target="_blank" rel="noopener noreferrer"><em>passes that cost on to the caller of the function</em></a>.</p>
<p>In the case of ftTransferCall, that caller is the user, no problem. But who is the caller in the case of ftTransferCallCallback? One hint comes from the permissions on ftTransferCallCallback. It can only be called by the <code>CALLBACK_ROLE</code>, which is only assigned to the address computed from <code>AuroraSdk.nearRepresentitiveImplicitAddress(address(this))</code>. Therefore this address must approve the Solidity contract to spend its wNEAR in order for it to cover the 1 yoctoNEAR cost in the callback.</p>
<p>This is the reason for the approveWNEAR function, which is also present in the Solidity contract. It does this approval so that wNEAR can be spent in the callback.</p>
<div class="language-solidity codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-solidity codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">approveWNEAR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">uint256</span><span class="token plain"> amount </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    PromiseCreateArgs </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> approveCall </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> near</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">auroraCall</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin">address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">wNEAR</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        abi</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">encodeWithSelector</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0x095ea7b3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// approve method selector</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token builtin">address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">this</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            amount</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        APPROVE_NEAR_GAS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    approveCall</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">transact</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The need for this function is rather quirky. Logically <code>nearRepresentitiveImplicitAddress</code> should be the identity function because it is returning the address on Aurora that corresponds to the XCC account of an Aurora address; meaning that the only way transactions can come from the <code>nearRepresentitiveImplicitAddress(address)</code> is if they were originally sent from the address itself.</p>
<p>Unfortunately, it is not the identity function because the notion of an implicit Aurora address for any named account on Near was defined long before the XCC feature was invented. The implementation of this is the most natural one: derive the address from the named account the same way addresses are derived from a public key; take the hash and use the last 20 bytes. Composing this implementation with the way XCC accounts are named results in returning a different address than we started with.</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// The XCC account for an Aurora address is a subaccount of Aurora.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">near_representative</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">AccountId</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">format!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"{}.aurora"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">hex</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// The implicit address on Aurora of a Near account is derived</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// in the "obvious" way.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">aurora_implicit_address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">account</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">AccountId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Address</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">hash</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">account</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">12</span><span class="token punctuation" style="color:#393A34">..</span><span class="token number" style="color:#36acaa">32</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Composing these functions logically should be the identity function,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// but these implementations do not do that unfortunately.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">near_representative_implicit_address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Address</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">aurora_implicit_address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">near_representative</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">debug_assert!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="conclusion">Conclusion<a href="https://doc.aurora.dev/blog/contract-callbacks-in-xcc#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In conclusion, it is important to remember when working with XCC that there are two addresses which logically correspond to the contract you are working with. One is, of course, the address where the contract is deployed, <code>address(this)</code>. The other is the address which becomes the caller in XCC callbacks, <code>AuroraSdk.nearRepresentitiveImplicitAddress(address(this))</code>. Sometimes it will be important to have a contract “approve itself” when it comes to spending tokens because these two addresses are different.</p>
<p>To check your understanding of this post, take a look at the full code for this token refund <a href="https://github.com/aurora-is-near/aurora-contracts-sdk/tree/76cb2f4f5932b5b9dd887834e1f7528cdeb1837c/examples/ft-refund" target="_blank" rel="noopener noreferrer"><em>example on GitHub</em></a> and play with it yourself! What happens when you remove <a href="https://github.com/aurora-is-near/aurora-contracts-sdk/blob/76cb2f4f5932b5b9dd887834e1f7528cdeb1837c/examples/ft-refund/integration-tests/src/lib.rs#L203C1-L223C47" target="_blank" rel="noopener noreferrer"><em>the call to approveWNEAR from the integration test</em></a>? What error do you see and why?</p>]]></content:encoded>
            <category>Tutorials</category>
        </item>
        <item>
            <title><![CDATA[Practical ERC20 Burning]]></title>
            <link>https://doc.aurora.dev/blog/practical-erc20-burning</link>
            <guid>https://doc.aurora.dev/blog/practical-erc20-burning</guid>
            <pubDate>Fri, 22 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Token burning is the act of permanently removing a certain number of tokens from circulation. This article delves into its intricacies and offers guidance based on my real-world experiences at Aurora]]></description>
            <content:encoded><![CDATA[<p>Token burning is the act of permanently removing a certain number of tokens from circulation. This article delves into its intricacies and offers guidance based on my real-world experiences at Aurora</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="why-is-there-a-problem">Why is there a problem?<a href="https://doc.aurora.dev/blog/practical-erc20-burning#why-is-there-a-problem" class="hash-link" aria-label="Direct link to Why is there a problem?" title="Direct link to Why is there a problem?">​</a></h2>
<p>The ERC20 standard does not inherently specify a token burning mechanism.</p>
<p>The most common implementation of ERC20 <a href="https://docs.openzeppelin.com/contracts/4.x/api/token/erc20?ref=lapitsky.com#ERC20Burnable" target="_blank" rel="noopener noreferrer">provides</a> <code>ERC20Burnable</code> to solve that, but not all deployed OpenZepellin contracts include <code>ERC20Burnable</code>. Many ERC20 contracts are locked and not upgradeable.</p>
<p>Due to these constraints, projects seek alternative ways to approach token burns.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="do-not-use-contract-burns">Do not use contract burns<a href="https://doc.aurora.dev/blog/practical-erc20-burning#do-not-use-contract-burns" class="hash-link" aria-label="Direct link to Do not use contract burns" title="Direct link to Do not use contract burns">​</a></h2>
<p>One often recommended way to burn tokens involves creating a contract that immediately self-destructs and sends tokens to its own address. However, this method comes with its set of challenges:</p>
<ul>
<li>The overhead of creating, deploying, and testing such contracts, especially if the burn needs to happen periodically</li>
<li>Even if the contract uses <code>SELFDESTRUCT</code> it does not preclude the possibility of redeploying another contract at the same address. This has been successfully exploited in the infamous <a href="https://forum.tornado.ws/t/full-governance-attack-description/62?ref=lapitsky.com" target="_blank" rel="noopener noreferrer">Tornado Cash attack</a> by using a metamorphic contract factory.</li>
<li>There is a negative sentiment against <code>SELFDESTRUCT</code> opcode and (although stagnant) <a href="https://eips.ethereum.org/EIPS/eip-4758?ref=lapitsky.com" target="_blank" rel="noopener noreferrer">EIP-4758</a> that highlights some security concerns.</li>
<li>Token burns via this method aren't recognized on most analytics platforms.</li>
</ul>
<p>Given the listed concerns, I advise against this approach and encourage the use of burn addresses.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="use-well-known-burn-addresses">Use well-known burn addresses<a href="https://doc.aurora.dev/blog/practical-erc20-burning#use-well-known-burn-addresses" class="hash-link" aria-label="Direct link to Use well-known burn addresses" title="Direct link to Use well-known burn addresses">​</a></h2>
<p>A burn address is a recognized externally owned account (<a href="https://ethereum.org/en/whitepaper/?ref=lapitsky.com#ethereum-accounts" target="_blank" rel="noopener noreferrer">EOA</a>) where tokens can be sent to symbolize their destruction. While the token count remains unchanged, these tokens are effectively removed from circulation since no private key can control the burn address.</p>
<p>One of the common questions is "What if somebody knows or brute forces the private keys for such EOA addresses?"</p>
<p>Ethereum security model rests on the practical impossibility of brute forcing EOA accounts, so it does not make sense to take the risk of such an attack into account when planning the burns. To mitigate the risk of malicious burn addresses, use only the well-known ones.</p>
<p>You can find the list of burn addresses on <a href="https://etherscan.io/accounts/label/burn?ref=lapitsky.com" target="_blank" rel="noopener noreferrer">Etherscan</a> but I recommend limiting it to the top two that stand out by the TVL and number of transactions: <code>0x0000000000000000000000000000000000000000</code> (<em>null</em>) and <code>0x000000000000000000000000000000000000dEaD</code> (<em>dead</em>).</p>
<p>Interestingly, OpenZeppelin's ERC20 implementation restricts transfers to <em>null</em> which could leave you with the second-best choice: <em>dead.</em></p>
<p>The benefit of using well-known burn addresses over "contract burns" is that burn addresses are accounted for and integrated into numerous analytics tools, ensuring accurate token burn data representation.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="bonus-tips">Bonus tips<a href="https://doc.aurora.dev/blog/practical-erc20-burning#bonus-tips" class="hash-link" aria-label="Direct link to Bonus tips" title="Direct link to Bonus tips">​</a></h2>
<ul>
<li>Ensure that your ERC20 contract is locked and immutable before initiating burns.</li>
<li>For ERC20 tokens on multiple networks, execute burns on your primary network only, for unified tracking and analytics.</li>
<li>For the first burn, refrain from using decentralized or ZK-bridges. If your contract unexpectedly rejects the transaction (like disallowing transfers to <em>null</em>) – it might muddle your analytics even though the tokens are technically burned.</li>
</ul>
<p>Big thanks to <a href="https://www.linkedin.com/in/lance-henderson/?ref=lapitsky.com" target="_blank" rel="noopener noreferrer">Lance Henderson</a> for technical insights and for reviewing this post!</p>]]></content:encoded>
            <category>Tips &amp; Tricks</category>
        </item>
        <item>
            <title><![CDATA[Integration tests for XCC communication]]></title>
            <link>https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing</link>
            <guid>https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing</guid>
            <pubDate>Fri, 08 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[XCC is a powerful tool to merge blockchain ecosystems together. In this post we will talk about how to write integration tests for the XCC contracts communicating between Aurora and Near using Rust]]></description>
            <content:encoded><![CDATA[<p>In this article, we will learn how to write local tests for the Aurora contracts, which use <a href="https://doc.aurora.dev/blog/cross-ecosystem-communication">XCC calls</a> to Near ecosystem. I will use a simple example to demonstrate it, step by step, we will write:</p>
<ol>
<li>A simple counter contract for Near blockchain.</li>
<li>Contract on Aurora, which calls the contract on Near by using the XCC.</li>
<li>One integration test in the <code>sandbox</code>.</li>
<li>Setup the <code>git action</code> for running this test automatically.</li>
</ol>
<p>The example described in this article: <a href="https://github.com/olga24912/AuroraToNearXCCExample" target="_blank" rel="noopener noreferrer">https://github.com/olga24912/AuroraToNearXCCExample</a></p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="counter-contract-on-near">Counter contract on Near<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#counter-contract-on-near" class="hash-link" aria-label="Direct link to Counter contract on Near" title="Direct link to Counter contract on Near">​</a></h2>
<p>I assume that you have already cloned a git repo locally or just created your own repo, in the case you want to add everything file by file to your project using this article.</p>
<p>We will start with creating a simple Counter contract on Near, which just has two functions: <code>increment</code> – for changing the value, and <code>get_num</code> – to return the current value.</p>
<p>We should have the following directories and files in <code>near</code> folder:</p>
<div class="language-toml codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-toml codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">AuroraToNearXCCExample: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- near</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- contracts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- build.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- Cargo.toml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- src</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |   |-- lib.rs</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Let's take a look at each of the files.</p>
<p><code>lib.rs</code>:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">near_sdk</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">borsh</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">BorshDeserialize</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">BorshSerialize</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">near_sdk</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">near_bindgen</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">PanicOnDefault</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[derive(PanicOnDefault, BorshDeserialize, BorshSerialize)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token type-definition class-name">Counter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    val</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u64</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[near_bindgen]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">impl</span><span class="token plain"> </span><span class="token class-name">Counter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[init]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">Self</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">Self</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            val</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">get_num</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u64</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">val</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">increment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u64</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">val </span><span class="token operator" style="color:#393A34">+=</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>Cargo.toml</code>:</p>
<div class="language-toml codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-toml codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">[package]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">name = "counter"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">version = "0.1.0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">edition = "2021"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[lib]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">crate-type = ["cdylib", "rlib"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[dependencies]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">near-sdk = "4.1.1"</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For compiling the contract into a WASM file, we will use the script <code>build.sh</code>:</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set -e</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rustup target add wasm32-unknown-unknown</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To compile the contract run:</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">./build.sh</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The target file: <code>near/contracts/target/wasm32-unknown-unknown/release/counter.wasm</code></p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="counter-contract-on-aurora">Counter contract on Aurora<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#counter-contract-on-aurora" class="hash-link" aria-label="Direct link to Counter contract on Aurora" title="Direct link to Counter contract on Aurora">​</a></h2>
<p>We already created a counter contract for Near, and now let's create the counter contract on Aurora, which will have one method <code>incrementXCC</code> inside, which we will call the <code>increment</code> method in the Near Counter contract.</p>
<p>First, create the following folder structure and the <code>Counter.sol</code> file</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">AuroraToNearXCCExample:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- aurora</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- contracts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- src</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |   |-- Counter.sol</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- near</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>Counter.sol</code> file:</p>
<div class="language-solidity codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-solidity codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pragma</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">solidity</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">^</span><span class="token version number" style="color:#36acaa">0.8.0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">IERC20</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@openzeppelin/contracts/token/ERC20/IERC20.sol"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">AuroraSdk</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> NEAR</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> PromiseCreateArgs</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"@auroraisnear/aurora-sdk/aurora-sdk/AuroraSdk.sol"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">contract</span><span class="token plain"> </span><span class="token class-name">Counter</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">using</span><span class="token plain"> </span><span class="token class-name">AuroraSdk</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> NEAR</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">using</span><span class="token plain"> </span><span class="token class-name">AuroraSdk</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> PromiseCreateArgs</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">uint64</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">constant</span><span class="token plain"> COUNTER_NEAR_GAS </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain">_000_000_000_000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    NEAR </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> near</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin">string</span><span class="token plain"> counterAccountId</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">constructor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">address</span><span class="token plain"> wnearAddress</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> counterNearAccountId</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        near </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> AuroraSdk</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">initNear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">IERC20</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wnearAddress</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        counterAccountId </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> counterNearAccountId</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">function</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">incrementXCC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">external</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin">bytes</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> args </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token builtin">bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'{"value": 1}'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        PromiseCreateArgs </span><span class="token keyword" style="color:#00009f">memory</span><span class="token plain"> callCounter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> near</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            counterAccountId</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token string" style="color:#e3116c">"increment"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            args</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            COUNTER_NEAR_GAS</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        callCounter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">transact</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>More information about how the aurora contracts with XCC work can be found <a href="https://doc.aurora.dev/blog/cross-ecosystem-communication">here,</a> or <a href="https://doc.aurora.dev/blog/building-a-game-using-near-aurora-and-bos">in this game example,</a> or in these <a href="https://github.com/aurora-is-near/aurora-contracts-sdk/blob/main/docs/NearFromAurora.md" target="_blank" rel="noopener noreferrer">official docs</a> in aurora-contracts-sdk repo.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="install-dependencies-for-counter-contract-on-aurora">Install dependencies for counter contract on Aurora<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#install-dependencies-for-counter-contract-on-aurora" class="hash-link" aria-label="Direct link to Install dependencies for counter contract on Aurora" title="Direct link to Install dependencies for counter contract on Aurora">​</a></h3>
<p>For deploying the counter contract on Aurora in integration tests, we should install <code>foundry</code> and the dependencies. First, go to <code>aurora</code> folder and install <code>aurora-sdk</code> by running:</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">yarn init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">yarn add @auroraisnear/aurora-sdk</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>For compiling aurora contracts in the test, we will use foundry. How to install foundry you can read <a href="https://book.getfoundry.sh/getting-started/installation" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>We should create <code>foundry.toml</code> in <code>aurora/contracts</code> folder.</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">AuroraToNearXCCExample:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- aurora</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- contracts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- src</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- foundry.toml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- integration-tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- near</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>foundry.toml</code>:</p>
<div class="language-toml codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-toml codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">[profile.default]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">src = 'src'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">out = 'out'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">libs = ['lib', '../node_modules']</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">allow_paths = []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">solc = "0.8.17"</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After that you need to run the next command from <code>aurora/contracts</code> folder:</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">rm -rf lib/aurora-contracts-sdk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">forge install aurora-is-near/aurora-contracts-sdk --no-commit</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After command execution in the <code>aurora/contracts</code> directory, the <code>lib</code> folder with <code>aurora-contracts-sdk</code> and all necessary files inside will be created.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="integration-test">Integration test<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#integration-test" class="hash-link" aria-label="Direct link to Integration test" title="Direct link to Integration test">​</a></h2>
<p>It is time to create an integration test! Go back to the <code>aurora</code> folder with <code>cd ..</code> and run (or just use already existing folder from repo):</p>
<div class="language-solidity codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-solidity codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">cargo </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">--</span><span class="token plain">lib integration</span><span class="token operator" style="color:#393A34">-</span><span class="token plain">tests</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>integration-tests</code> folder will be created. We should also create the following <code>rust-toolchain</code> file in this folder:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">toolchain</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">channel </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"1.66.1"</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>We need this because this channel is used in dependencies, and we should use the same channel to make contracts work properly. For people outside the Rust community, you can think about this as setting the Rust version, more info is <a href="https://rust-lang.github.io/rustup/concepts/toolchains.html" target="_blank" rel="noopener noreferrer">here</a>.</p>
<p>We should obtain this folder structure:</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">AuroraToNearXCCExample:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- aurora</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- contracts</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |-- integration-tests</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- Cargo.toml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- src</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |   |-- lib.rs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|   |   |-- rust-toolchain</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- near</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Edit now <code>lib.rs</code>:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[cfg(test)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">tests</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">tokio</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">counter_test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><code>and Cargo.toml</code>:</p>
<div class="language-toml codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-toml codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">[package]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">name = "integration-tests"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">version = "0.1.0"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">edition = "2021"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[dependencies]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">aurora-sdk-integration-tests = { git = "https://github.com/aurora-is-near/aurora-contracts-sdk.git" }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">near-sdk = "4.1.1"</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The command for running the test should run this succesfully:</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">cargo test</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You should see output like this afterwards:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">Compiling integration-tests v0.1.0 (/Users/aurora/Projects/AuroraToNearXCCExample/aurora/integration-tests)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Finished test [unoptimized + debuginfo] target(s) in 2.86s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     Running unittests src/lib.rs (target/debug/deps/integration_tests-307b69604bee401f)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">running 1 test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test tests::counter_test ... ok</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00ss</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="deploy-near-contract-in-integration-tests">Deploy Near contract in integration tests<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#deploy-near-contract-in-integration-tests" class="hash-link" aria-label="Direct link to Deploy Near contract in integration tests" title="Direct link to Deploy Near contract in integration tests">​</a></h3>
<p>Let's start writing our test with compiling and deploying the Counter contract on Near inside the sandbox. To do this we will: create the sandbox workspace with <code>workspaces::sandbox()</code>, compile near contract by using <code>build.sh</code> script (as we did above in section <code>Create Counter contract on Near</code>), deploy the contract with <code>worker.dev_deploy</code> and call the constructor with <code>near_counter.call("new").</code></p>
<p>All of that is inside the <code>deploy_near_counter</code> function, which we will use now directly in our <code>counter_test</code>. The full code is below:</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">#[cfg(test)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mod tests {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    use aurora_sdk_integration_tests::{tokio, workspaces, {utils::process}};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    use aurora_sdk_integration_tests::workspaces::Contract;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    use std::path::Path;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #[tokio::test]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    async fn counter_test() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let worker = workspaces::sandbox().await.unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let near_counter = deploy_near_counter(&amp;worker).await;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    async fn deploy_near_counter(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        worker: &amp;workspaces::Worker[workspaces::network::Sandbox](workspaces::network::Sandbox),</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ) -&gt; Contract {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let contract_path = Path::new("../../near/contracts");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let output = tokio::process::Command::new("bash")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .current_dir(contract_path)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .args(["build.sh"])</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .output()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .await</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            .unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        process::require_success(&amp;output).unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let artifact_path =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            contract_path.join("target/wasm32-unknown-unknown/release/counter.wasm");</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let wasm_bytes = tokio::fs::read(artifact_path).await.unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let near_counter = worker.dev_deploy(&amp;wasm_bytes).await.unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        near_counter.call("new").transact().await.unwrap().into_result().unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        near_counter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can run <code>cargo test</code> to check if your code is working at this stage.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="deploy-aurora-engine-and-wnear">Deploy Aurora Engine and wNEAR<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#deploy-aurora-engine-and-wnear" class="hash-link" aria-label="Direct link to Deploy Aurora Engine and wNEAR" title="Direct link to Deploy Aurora Engine and wNEAR">​</a></h3>
<p>Now, let's deploy the Aurora Engine contract itself to the sandbox. Also, we will need to deploy wNEAR in Aurora. It is the ERC-20 on Aurora which corresponds to the Near token on Near. We will use this token later for the payment.</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">#[cfg(test)]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mod tests {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    use aurora_sdk_integration_tests::{tokio, workspaces, {utils::process}, aurora_engine, wnear, workspaces::Contract};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    use aurora_sdk_integration_tests::workspaces::Contract;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    use std::path::Path;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    #[tokio::test]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    async fn counter_test() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let worker = workspaces::sandbox().await.unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let near_counter = deploy_near_counter(&amp;worker).await;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let engine = aurora_engine::deploy_latest(&amp;worker).await.unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        let wnear = wnear::Wnear::deploy(&amp;worker, &amp;engine).await.unwrap();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="deploy-counter-contract-on-aurora-in-integration-tests">Deploy counter contract on Aurora in integration tests<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#deploy-counter-contract-on-aurora-in-integration-tests" class="hash-link" aria-label="Direct link to Deploy counter contract on Aurora in integration tests" title="Direct link to Deploy counter contract on Aurora in integration tests">​</a></h3>
<p>Moving to deploying counter contract to Aurora. We are creating a new user account and function to deploy the counter. This function takes: (1) aurora engine, (2) user account, (3) wNear address on aurora, (4) Counter Account ID on Near.</p>
<p>Let's add new dependencies first:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[cfg(test)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">mod</span><span class="token plain"> </span><span class="token module-declaration namespace" style="opacity:0.7">tests</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">tokio</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> workspaces</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token namespace" style="opacity:0.7">utils</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">process</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> aurora_engine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> wnear</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> ethabi</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">workspaces</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Contract</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">std</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">path</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">aurora_engine_types</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">types</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">aurora_engine</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">AuroraEngine</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">utils</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">forge</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">utils</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">ethabi</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">DeployedContract</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">...</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now let's define <code>deploy_aurora_counter</code> function and add it to out test:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">counter_test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> user_account </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> worker</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">dev_create_account</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> aurora_counter </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">deploy_aurora_counter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">engine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">user_account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> wnear</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">aurora_token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">near_counter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">deploy_aurora_counter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">engine</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">AuroraEngine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   user_account</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token namespace" style="opacity:0.7">workspaces</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   wnear_address</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   near_counter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">Contract</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">DeployedContract</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>To deploy aurora contract we should first compile and deploy <code>aurora_sdk_lib</code>, and corresponding dependencies:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">deploy_aurora_counter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">engine</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">AuroraEngine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   user_account</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token namespace" style="opacity:0.7">workspaces</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   wnear_address</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                   near_counter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">Contract</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">DeployedContract</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> contract_path </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"../contracts"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> aurora_sdk_path </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">Path</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"../contracts/lib/aurora-contracts-sdk/aurora-solidity-sdk"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> codec_lib </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">forge</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">deploy_codec_lib</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">aurora_sdk_path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> utils_lib </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">forge</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">deploy_utils_lib</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">aurora_sdk_path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> aurora_sdk_lib </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">forge</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">deploy_aurora_sdk_lib</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">aurora_sdk_path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> engine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> codec_lib</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> utils_lib</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>After that, we can compile and deploy the counter contract itself:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> constructor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">forge</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">forge_build</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      contract_path</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token macro property" style="color:#36acaa">format!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                         </span><span class="token string" style="color:#e3116c">"@auroraisnear/aurora-sdk/aurora-sdk/AuroraSdk.sol:AuroraSdk:0x{}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                         aurora_sdk_lib</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">encode</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                       </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                       </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"out"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Counter.sol"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Counter.json"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> deploy_bytes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> constructor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">create_deploy_bytes_with_args</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token namespace" style="opacity:0.7">ethabi</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Token</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">wnear_address</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">raw</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token namespace" style="opacity:0.7">ethabi</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Token</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">near_counter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_string</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> address </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> engine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">deploy_evm_contract_with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user_account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> deploy_bytes</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    constructor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">deployed_at</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="mint-wnear-for-user">Mint wNEAR for user<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#mint-wnear-for-user" class="hash-link" aria-label="Direct link to Mint wNEAR for user" title="Direct link to Mint wNEAR for user">​</a></h3>
<p>When we use XCC for the first time in our setup, the implicit contract on the Near will be created. You can read more about it <a href="https://github.com/aurora-is-near/aurora-contracts-sdk/blob/main/docs/NearFromAurora.md" target="_blank" rel="noopener noreferrer">here</a>. We also could call this implicit contract as sub-account. The overall scheme could be presented as:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1694083461-screenshot-2023-09-07-at-11-42-21.png" alt="" class="img_jFja"></p>
<p>Creation of a sub-account will cost you 2 NEAR tokens. That is why we need to mint 2 wNEAR for our user on Aurora after approving the spending of the wNear by counter contract.</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">///....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">aurora_engine_sdk</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">types</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token plain">near_account_to_evm_address</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">aurora_engine_types</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token constant" style="color:#36acaa">U256</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">types</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Wei</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">counter_test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> user_address </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">near_account_to_evm_address</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">user_account</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">as_bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NEAR_DEPOSIT</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u128</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">near_sdk</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token constant" style="color:#36acaa">ONE_NEAR</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    engine</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">mint_wnear</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">wnear</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user_address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">NEAR_DEPOSIT</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> evm_call_args </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> wnear</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">aurora_token</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">create_approve_call_bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">aurora_counter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">U256</span><span class="token punctuation" style="color:#393A34">::</span><span class="token constant" style="color:#36acaa">MAX</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> engine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">call_evm_contract_with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">user_account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        wnear</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">aurora_token</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        evm_call_args</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Wei</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">zero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token namespace" style="opacity:0.7">aurora_engine</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">unwrap_success</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="call-incrementxcc-method-in-counter-contract-on-aurora">Call incrementXCC method in counter contract on Aurora<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#call-incrementxcc-method-in-counter-contract-on-aurora" class="hash-link" aria-label="Direct link to Call incrementXCC method in counter contract on Aurora" title="Direct link to Call incrementXCC method in counter contract on Aurora">​</a></h3>
<p>In this section, we will write a function that calls the <code>incrementXCC</code> method in the Counter contract on Aurora. <code>incrementXCC</code> method is calling inside the <code>increment</code> method from the Near contract and counter is incremented on Near.</p>
<p>Let's write <code>increment</code> function in our test now, which will call the <code>incrementXCC</code> from the Aurora's contract. We'll provide as input: (1) aurora engine contract deployed in the sandbox, (2) the near account of the user which will sign the transaction, (3) the counter contract deployed on aurora.</p>
<p>Notice that we're going to call the method in the aurora contract, but in this function, the user account ID on Near is provided. We can do this because it is possible to call the aurora's counter contract method by using <code>call</code> method from the Aurora Engine contract.</p>
<p>In that case, the near user will sign a transaction, but inside the Aurora Engine, there is <a href="https://github.com/aurora-is-near/aurora-engine/blob/71980db92a9d4b95d4e1f53954b98e0e8f002a4b/engine-sdk/src/types.rs#L28" target="_blank" rel="noopener noreferrer">an implicit mapping</a> between the near account ID and aurora addresses. And it is precisely how we will communicate with the contract in our test.</p>
<p>Now, let's first encode the arguments for the <code>call</code> method in the <code>AuroraEngine</code> contract on Near and after that – submit a transaction and check its result:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">use</span><span class="token plain"> </span><span class="token namespace" style="opacity:0.7">aurora_sdk_integration_tests</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">aurora_engine_types</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">parameters</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token namespace" style="opacity:0.7">engine</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token punctuation" style="color:#393A34">{</span><span class="token class-name">CallArgs</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">FunctionCallArgsV1</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token attribute attr-name" style="color:#00a4db">#[tokio::test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">counter_test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">increment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">engine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">user_account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> aurora_counter</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">increment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    engine</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">AuroraEngine</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    user_account</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token namespace" style="opacity:0.7">workspaces</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token class-name">Account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    aurora_counter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">DeployedContract</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> contract_args </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> aurora_counter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">create_call_method_bytes_without_args</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"incrementXCC"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> engine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">call_evm_contract_with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">user_account</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          aurora_counter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token class-name">ContractInput</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">contract_args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token class-name">Wei</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">zero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token namespace" style="opacity:0.7">aurora_engine</span><span class="token namespace punctuation" style="opacity:0.7;color:#393A34">::</span><span class="token function" style="color:#d73a49">unwrap_success</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">status</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="check-counter-value-on-near">Check counter value on Near<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#check-counter-value-on-near" class="hash-link" aria-label="Direct link to Check counter value on Near" title="Direct link to Check counter value on Near">​</a></h3>
<p>Let’s check that the counter has been incremented at the Counter contract on Near. For that, call the <code>get_num</code> view method at the counter and check that the result equals 1.</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token attribute attr-name" style="color:#00a4db">#[tokio::test]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">async</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">counter_test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">//....</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> counter_val</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u64</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> near_counter</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">view</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"get_num"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">await</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">json</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token macro property" style="color:#36acaa">assert_eq!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">counter_val</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="run-final-test">Run final test<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#run-final-test" class="hash-link" aria-label="Direct link to Run final test" title="Direct link to Run final test">​</a></h3>
<p>Now, when everything is ready, let's go to <code>aurora/integration-tests/</code> directory and run to check that we have the expected results:</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">cargo test</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="git-action">Git Action<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#git-action" class="hash-link" aria-label="Direct link to Git Action" title="Direct link to Git Action">​</a></h2>
<p>Now, let's set up the git action so that the test runs automatically every time we push changes. To set it up, we must create <code>.github/workflow/test.yml</code> and <code>Makefile</code>.</p>
<div class="language-bash codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-bash codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">AuroraToNearXCCExample:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- aurora</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- near</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- Makefile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|-- .github/workflow/test.yml</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <code>.github/workflows/test.yml</code> contains the git action description. In our case, we are going to run it on <code>push</code> events. First, we install <code>foundry</code> for compiling our Solidity contracts, second, we checkout the repository with all submodules, and in the end, run the script from Makefile.</p>
<div class="language-yaml codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-yaml codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aurora</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">to</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">near</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">xcc</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">example test automatically</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">push</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">test-counter</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ubuntu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Test counter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Install Foundry</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foundry</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">rs/foundry</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">toolchain@v1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Clone the repository</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/checkout@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">submodules</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> recursive</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">          make test-counter</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Now, let’s take a closer look at the <code>Makefile</code> . First, we go to the <code>aurora</code> directory and install dependencies, second, we compile near contracts, and in the end, run our integration test.</p>
<div class="language-makefile codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-makefile codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">test-counter:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        cd aurora &amp;&amp; \\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        yarn add @auroraisnear/aurora-sdk &amp;&amp; \\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        cd ../near/contracts &amp;&amp; \\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ./build.sh &amp;&amp; \\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        cd ../../aurora/integration-tests &amp;&amp; \\</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        cargo test --all --jobs 4 -- --test-threads 4</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>That is it, we have set up the git action! Now, our integration test will run automatically after each push to our GitHub repo.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="conclusion">Conclusion<a href="https://doc.aurora.dev/blog/communication-from-aurora-to-near-local-testing#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In this article, we have created a simple contract on Aurora, which calls the function from Near contract. We have learned how it is possible to test such contracts inside the sandbox locally. And in the end, we have set up the git action to make the test run automatically.</p>
<p>I hope this article will make it easier for you to develop contracts on Aurora with XCC to Near.</p>
<p>Happy development! In a case you will have any questions about this article, feel free to contract our DevSupport team on <a href="https://discord.com/invite/dEFJBz8HQV" target="_blank" rel="noopener noreferrer">our Discord server</a>.</p>
<p>The example from this article you can find in this repo: <a href="https://github.com/olga24912/AuroraToNearXCCExample" target="_blank" rel="noopener noreferrer">https://github.com/olga24912/AuroraToNearXCCExample</a></p>]]></content:encoded>
            <category>Tutorials</category>
        </item>
        <item>
            <title><![CDATA[Turning Smart Contracts into Indexers]]></title>
            <link>https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers</link>
            <guid>https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers</guid>
            <pubDate>Fri, 25 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Learn how you can use functional programming patterns in Rust to share a codebase between both a smart contract and an indexer, and how cross-compilation can benefit your project]]></description>
            <content:encoded><![CDATA[<p>Recently, Michael Birch gave a <a href="https://www.conf42.com/Rustlang_2023_Michael_Birch_smart_contracts_indexers_crosscompilation" target="_blank" rel="noopener noreferrer"><em>talk at a virtual Rust conference</em></a> about some work we have done here at Aurora to enable our technology. In case you missed it, this blog post is a written version of the talk.</p>
<p>That talk was aimed at a more general audience, giving background about Aurora, Near, and blockchain technology in general. However, this post assumes you are already familiar with most of the Aurora/Near/blockchain background (you are here on our website, after all) and instead focuses more on the Rust side of things.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="motivation">Motivation<a href="https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers#motivation" class="hash-link" aria-label="Direct link to Motivation" title="Direct link to Motivation">​</a></h2>
<p>The goal of this post is to describe how you can use functional programming patterns in Rust to share a codebase between both a smart contract and an indexer. But the first question to answer is why this is desirable in the first place.</p>
<p>Indexers provide a specialized view of the blockchain state to enable low-latency responses to particular kinds of queries. For example, block explorers will use an indexer to show the balances of all the tokens held by a user. An indexer is required to accomplish this because the on-chain information about balances is indexed in the opposite way to how the block explorer displays the information. By which I mean that on-chain each token has information about all the addresses with a non-zero balance, but the block explorer shows all the non-zero balances for a single address.</p>
<p>Generally, indexers are specialized to follow the state of a particular contract (or class of contracts). Therefore, the code for the indexer is closely related to the code for the smart contract it follows. Thus, it would be lower developer maintenance to have a common codebase for the smart contract and its associated indexer.</p>
<p>Additionally, sharing a codebase makes it possible to create much more powerful indexers than simply something that can respond to queries. For example, an indexer with access to the smart contract logic can simulate whole transactions off-chain to provide free and low-latency feedback to users on potential errors.</p>
<p>In the case of Aurora, the indexer we use for the Aurora Engine smart contract serves data that is used by <a href="https://doc.aurora.dev/blog/spinning-up-your-own-aurora-node">our RPC implementation.</a> The Ethereum RPC spec includes a few methods (e.g., <code>eth_estimateGas</code>) which require simulating transactions before submitting them to the chain. Therefore, we have a clear use for the extra indexer features that are enabled by having a shared codebase between the Aurora Engine and its indexer.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="rust-features">Rust Features<a href="https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers#rust-features" class="hash-link" aria-label="Direct link to Rust Features" title="Direct link to Rust Features">​</a></h2>
<p>To reach the goal of having a shared codebase between the Aurora Engine and an indexer for the Engine, we leverage some features of Rust.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="cross-compilation">Cross-Compilation<a href="https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers#cross-compilation" class="hash-link" aria-label="Direct link to Cross-Compilation" title="Direct link to Cross-Compilation">​</a></h3>
<p>The Aurora Engine is written in Rust because it is a smart contract on Near which uses Web Assembly as its runtime. Rust has good support for Web Assembly (Wasm) as a compilation target, so it is a good language choice for writing smart contracts for Near. But, of course, it also is able to compile the same code to executable binaries for typical platforms (e.g., Linux). Compiling the same code to multiple output targets is referred to as “cross-compiling”.</p>
<p>The first step to having our smart contract code also be used as an indexer is to cross-compile the same code as both Wasm and a native executable. In Rust, it is easy to install other compilation targets (the default target will be whatever platform you installed Rust on) and to specify them as the compilation target. The following commands show installing the Wasm target and compiling a project to Wasm.</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">$ rustup target add wasm32-unknown-unknown</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ cargo build --release –-target wasm32-unknown-unknown</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="conditional-compilation">Conditional Compilation<a href="https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers#conditional-compilation" class="hash-link" aria-label="Direct link to Conditional Compilation" title="Direct link to Conditional Compilation">​</a></h3>
<p>When you start compiling code to multiple platforms, likely there will be situations where you want the implementation to differ depending on the compilation target. For example, native code can read from a local file system, whereas Wasm modules need to delegate to their host (the machine running the Wasm VM) to access state.</p>
<p>In Rust, you can use conditional compilation to have different implementations depending on the target. In the example below, the function `foo` has different implementations depending on if the compilation target is Wasm or not.</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">foo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[cfg(target_arch = </span><span class="token attribute attr-name string" style="color:#e3116c">"wasm32"</span><span class="token attribute attr-name" style="color:#00a4db">)]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">foo_for_wasm</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token attribute attr-name" style="color:#00a4db">#[cfg(not(target_arch = </span><span class="token attribute attr-name string" style="color:#e3116c">"wasm32"</span><span class="token attribute attr-name" style="color:#00a4db">))]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">foo_for_generic_arch</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>However, conditional compilation has some drawbacks. First of all, it’s a little verbose, which hurts code readability. You can see in the example above that the function <code>foo</code> is “noisier” than it would be if not for the extra conditional compilation annotations. Secondly, IDEs do not handle conditional compilation especially well. They will only analyze one branch of the code at a time, and it is a little tedious to switch between which target you are asking the IDE to check.</p>
<p>Fortunately, we do not need to use conditional compilation very much because we can adopt coding style patterns from functional programming. The key idea is to write code that is abstract with respect to the implementation of target-specific effects such as reading/writing state. In Rust, we can accomplish this using traits and type generics.</p>
<h3 class="anchor anchorWithStickyNavbar_wBbR" id="traits-and-type-generics">Traits and Type Generics<a href="https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers#traits-and-type-generics" class="hash-link" aria-label="Direct link to Traits and Type Generics" title="Direct link to Traits and Type Generics">​</a></h3>
<p>Rust’s trait defines an interface. It gives the type signatures of the methods a type implementing that trait must have, but does not necessarily specify the implementation of those methods (though you are allowed to give a default implementation of a method in a trait). Consider the following example:</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">trait</span><span class="token plain"> </span><span class="token type-definition class-name">IO</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">u8</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Vec</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token keyword" style="color:#00009f">u8</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">write</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">u8</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token keyword" style="color:#00009f">u8</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">get_balance</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">IO</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> user</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">User</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">u128</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">u128</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">from_be_bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">read</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">user</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">id</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">r</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This example includes a trait with a (simplified) interface for interacting with state as well as a function with a generic type parameter. The syntax means “this function accepts any type so long as it implements <code>IO</code> the interface”. The benefit of coding in this style is that the <code>get_balance</code> function can now be reused in any program, regardless of what compilation target it uses, so long as there is an <code>IO</code> implementation for it. This is exactly what enables us to share a codebase between our smart contract and indexer.</p>
<p>In this example above, it might seem like we are going through a lot of trouble to reuse one line of code in two different places. But this approach scales. The function we share does not need to be only a single line, it could have any amount of complexity.</p>
<p>Moreover, state access is not the only target-specific effect. We can have traits for accessing environment variables (in the blockchain context, these would be variables like the current block height, the signer of the transaction, etc) and interacting with other processes (in the blockchain context, this corresponds to calling other smart contracts).</p>
<p>Beyond reusability, there are other benefits to coding in this style. Code written in this way is easier to test because you can simulate the effects in-memory (for example, instead of actually reading and writing files). It is also easier to reason about this style of code. When there are no side-effects, the function signature gives you all the information you need about the function.</p>
<p>If a function needs access to state, then you know it will include the <code>IO</code> trait bound, and conversely, if the state is not needed, then it will not include that bound. When you can learn so much about a function without reading its implementation body, it becomes much easier to navigate the codebase.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="application-aurora-engine">Application: Aurora Engine<a href="https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers#application-aurora-engine" class="hash-link" aria-label="Direct link to Application: Aurora Engine" title="Direct link to Application: Aurora Engine">​</a></h2>
<p>The entire Aurora Engine is written in this style. For example, <a href="https://github.com/aurora-is-near/aurora-engine/blob/2.10.2/engine/src/engine.rs#L1280" target="_blank" rel="noopener noreferrer"><em>here</em></a> is the real version of the <code>get_balance</code> function we showed a toy example of above. And similarly, there is a <code>set_balance</code> <a href="https://github.com/aurora-is-near/aurora-engine/blob/2.10.2/engine/src/engine.rs#L1269" target="_blank" rel="noopener noreferrer"><em>function</em></a>. These two functions are composed together to make an <code>add_balance</code> <a href="https://github.com/aurora-is-near/aurora-engine/blob/2.10.2/engine/src/engine.rs#L1258" target="_blank" rel="noopener noreferrer"><em>function</em></a>.</p>
<div class="language-rust codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-rust codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">get_balance</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">IO</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> address</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Wei</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> raw </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> io</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">read_u256</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">&amp;</span><span class="token function" style="color:#d73a49">address_to_key</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">KeyPrefix</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">unwrap_or_else</span><span class="token punctuation" style="color:#393A34">(</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token closure-params">_</span><span class="token closure-params closure-punctuation punctuation" style="color:#393A34">|</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">U256</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">zero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Wei</span><span class="token punctuation" style="color:#393A34">::</span><span class="token function" style="color:#d73a49">new</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">raw</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">set_balance</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">IO</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> address</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> balance</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">Wei</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    io</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">write_storage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token function" style="color:#d73a49">address_to_key</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">KeyPrefix</span><span class="token punctuation" style="color:#393A34">::</span><span class="token class-name">Balance</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">balance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">to_bytes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">pub</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">fn</span><span class="token plain"> </span><span class="token function-definition function" style="color:#d73a49">add_balance</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">IO</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    io</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token keyword" style="color:#00009f">mut</span><span class="token plain"> </span><span class="token class-name">I</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    address</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token class-name">Address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    amount</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Wei</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token class-name">Result</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">BalanceOverflow</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> current_balance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">get_balance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> address</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> new_balance </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> current_balance</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">checked_add</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">amount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ok_or</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">BalanceOverflow</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">?</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">set_balance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">io</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> address</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">new_balance</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token class-name">Ok</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>You can see the implementation of the <code>IO</code> trait for both the <a href="https://github.com/aurora-is-near/aurora-engine/blob/2.10.2/engine-sdk/src/near_runtime.rs#L128" target="_blank" rel="noopener noreferrer"><em>Near Runtime</em></a>, and the “<a href="https://github.com/aurora-is-near/aurora-engine/blob/2.10.2/engine-standalone-storage/src/engine_state.rs#L82" target="_blank" rel="noopener noreferrer"><em>standalone engine</em></a>” which uses a <code>rocksdb</code> instance to persist the state.</p>
<p>The former is used in the Wasm artifact, which is deployed to Near as the Aurora Engine smart contract. The standalone engine is used to <a href="https://github.com/aurora-is-near/borealis-engine-lib/blob/v0.23.4/refiner-app/src/socket.rs#L129" target="_blank" rel="noopener noreferrer"><em>implement the eth_estimateGas RPC method</em></a>, and the state is populated by <a href="https://github.com/aurora-is-near/aurora-engine/blob/2.10.2/engine-standalone-storage/src/sync/mod.rs#L229" target="_blank" rel="noopener noreferrer"><em>consuming Near blocks</em></a> (from <a href="https://github.com/aurora-is-near/borealis-engine-lib/tree/v0.23.4#near-data-lake" target="_blank" rel="noopener noreferrer"><em>Near data lake for example</em></a>).</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="conclusion">Conclusion<a href="https://doc.aurora.dev/blog/turning-smart-contracts-into-indexers#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>The take-home message from this post is that following the functional programming pattern of only writing business logic using abstractions of target-specific effects such as IO results in code that is easier to test, maintain, and reuse. In the particular case of Aurora, that reuse manifests as having the Aurora Engine smart contract and the indexer that serves the Aurora RPC share a codebase.</p>]]></content:encoded>
            <category>Tutorials</category>
        </item>
        <item>
            <title><![CDATA[How to get USDC tokens on Aurora testnet]]></title>
            <link>https://doc.aurora.dev/blog/how-to-get-usdc-tokens-on-aurora-testnet</link>
            <guid>https://doc.aurora.dev/blog/how-to-get-usdc-tokens-on-aurora-testnet</guid>
            <pubDate>Fri, 28 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[While developing your smart contracts on Aurora, there are situations when you will need to get native Ethereum ERC-20 tokens on your testnet account – let’s find out how to get these by using the USDC token as an example]]></description>
            <content:encoded><![CDATA[<p>When you develop a contract, quite often you need ERC-20 tokens for testing. If your contract is rather small and doesn't use cross-contract calls, most likely, you don't need official USDC tokens or any other specific tokens. In that case, the best solution is just to take the standard ERC-20 contract, deploy it, and mint as many test tokens as you wish.</p>
<p>However, sometimes the easier solution for testing can be to get official testing tokens. For example, if your contract is use difficult cross-contract calls and dependencies contracts are already deployed on testnet and support only limited numbers of tokens. When I am testing RainbowBridge during development I use the USDC tokens on testnet.</p>
<p>In this article, I will explain how to get official native Ethereum ERC-20 tokens on your Aurora testnet account in the example of USDC tokens. This method will work with other popular native Ethereum ERC-20 as well, and it will be clear how to get these tokens also in Goerli Ethereum and in Near testnet.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="plan-for-getting-usdc-tokens-on-aurora-testnet">Plan for getting USDC tokens on Aurora testnet<a href="https://doc.aurora.dev/blog/how-to-get-usdc-tokens-on-aurora-testnet#plan-for-getting-usdc-tokens-on-aurora-testnet" class="hash-link" aria-label="Direct link to Plan for getting USDC tokens on Aurora testnet" title="Direct link to Plan for getting USDC tokens on Aurora testnet">​</a></h2>
<p>For getting USDC tokens, we're going to use the following plan:</p>
<ol>
<li>Create an account in MetaMask for the Ethereum Goerli network and Aurora testnet</li>
<li>Mint Ether for your Ethereum account</li>
<li>Swap Ether to the USDC tokens in the Ethereum network</li>
<li>Transfer USDC tokens from Ethereum to Aurora by using Rainbow Bridge</li>
</ol>
<p>The instructions for steps 1 and 2 you can find in article <a href="https://doc.aurora.dev/blog/getting-started-with-aurora">"Getting started with Aurora"</a>, so I will not describe them here. For the 1 step see section "Creating an account on the Aurora testnet using MetaMask", for the 2 step see section "Obtaining AuroraEth on the testnet" -&gt; "The second method: transfer from Ethereum".</p>
<p>I assume that you already have an account in MetaMask for both Goerli Ethereum network and Aurora testnet and also you have some Ether in Goerli Ethereum network.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="usdc-tokens-accounts">USDC tokens accounts<a href="https://doc.aurora.dev/blog/how-to-get-usdc-tokens-on-aurora-testnet#usdc-tokens-accounts" class="hash-link" aria-label="Direct link to USDC tokens accounts" title="Direct link to USDC tokens accounts">​</a></h2>
<p>There can be a large number of accounts for USDC on the testnets. Moreover, you can take a USDC token contract and deploy it on your own. We are interested in the official deployment of USDC tokens on Goerli Ethereum and the official wrappers of this token on Aurora and Near.</p>
<p>Official USDC address on Goerli Ethereum: <a href="https://goerli.etherscan.io/token/0x07865c6e87b9f70255377e024ace6630c1eaa37f" target="_blank" rel="noopener noreferrer">0x07865c6E87B9F70255377e024ace6630C1Eaa37F</a></p>
<p>For search the addresses on the Near and Aurora testnet networks and check that address is supported by Rainbow Bridge you can go to <a href="https://testnet.rainbowbridge.app/deploy" target="_blank" rel="noopener noreferrer">https://testnet.rainbowbridge.app/deploy</a> , write the address of the USDC token in the search and click the <code>Find Token</code> button:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544553-screenshot-2023-07-28-at-12-40-45.png" alt="" class="img_jFja"></p>
<p>You will see the query result:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690545689-screenshot-2023-07-28-at-13-01-18.png" alt="" class="img_jFja"></p>
<p>As we can see from the image above, the address on the NEAR is: <code>07865c6e87b9f70255377e024ace6630c1eaa37f.factory.goerli.testnet</code></p>
<p>And the address on the Aurora is: <code>0x901fb725c106e182614105335ad0e230c91b67c8</code></p>
<p><strong>WARNING:</strong> Some sites can mint USDC tokens, but with a different address, so you need to double-check the address of minted tokens.</p>
<p>This <a href="https://github.com/aurora-is-near/bridge-assets/tree/master/tokens" target="_blank" rel="noopener noreferrer">repo</a> also contains the list of tokens supported by the Rainbow Bridge, however this list is not full for the testnets, for example, the USDC tokens are not included.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="get-usdc-token-on-ethereum">Get USDC token on Ethereum<a href="https://doc.aurora.dev/blog/how-to-get-usdc-tokens-on-aurora-testnet#get-usdc-token-on-ethereum" class="hash-link" aria-label="Direct link to Get USDC token on Ethereum" title="Direct link to Get USDC token on Ethereum">​</a></h2>
<p>We have the Goerli Ethereum account and some GoerliETH. Let’s exchange some Ether for USDC tokens! For swapping, we're going to use Uniswap.</p>
<p><strong>1. Open Uniswap site:</strong> <a href="https://app.uniswap.org/#/swap" target="_blank" rel="noopener noreferrer">https://app.uniswap.org/#/swap</a></p>
<p><strong>2. Connect to Goerli Network.</strong> It can look like it doesn’t support testnet network, but it actually support it, just it is not clear from the web interface.</p>
<ul>
<li>Click the <code>Connect</code> button. Choose MetaMask and connect to your account.</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1689675168-uniswapconnect.jpg" alt="" class="img_jFja"></p>
<ul>
<li>Switch on <code>Show testnets</code> option on the Uniswap site:</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544253-screenshot-2023-07-28-at-12-35-32.png" alt="" class="img_jFja"></p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544262-screenshot-2023-07-28-at-12-35-41.png" alt="" class="img_jFja"></p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544274-screenshot-2023-07-28-at-12-35-54.png" alt="" class="img_jFja"></p>
<ul>
<li>Change the network to Goerli Testnet.</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544545-screenshot-2023-07-28-at-12-39-49.png" alt="" class="img_jFja"></p>
<p><strong>3. Swap GoerliEth into USDC:</strong></p>
<ul>
<li>Click <code>Select token</code>. Yes, you doesn’t see the USDC tokens in the list. It is Ok, don’t worry:</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544771-screenshot-2023-07-28-at-12-45-29.png" alt="" class="img_jFja"></p>
<p>In the search field write <code>USDC</code> and select the <code>USD Coin</code> from the list. For some tokens, even searching by the token's name doesn't help. In that case, try to use the <strong>token's address</strong> in the search.</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544783-screenshot-2023-07-28-at-12-45-51.png" alt="" class="img_jFja"></p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544794-screenshot-2023-07-28-at-12-45-57.png" alt="" class="img_jFja"></p>
<ul>
<li>Put some small amount of ETH in first line. 0.01 GöETH will be enough.</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544849-screenshot-2023-07-28-at-12-44-59.png" alt="" class="img_jFja"></p>
<ul>
<li>Click Swap</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544873-screenshot-2023-07-28-at-12-45-06.png" alt="" class="img_jFja"></p>
<p>Congratulations! Now you get a lot of test USDC in your Ethereum account. You can check, that you receive tokens in MetaMask and check the address of the received tokens. If you don’t see the USDC tokens click "Import tokens" in MetaMask and put the address of USDC token.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="transfer-usdc-tokens-to-aurora">Transfer USDC tokens to Aurora<a href="https://doc.aurora.dev/blog/how-to-get-usdc-tokens-on-aurora-testnet#transfer-usdc-tokens-to-aurora" class="hash-link" aria-label="Direct link to Transfer USDC tokens to Aurora" title="Direct link to Transfer USDC tokens to Aurora">​</a></h2>
<p>Now the easy part: transfer USDC tokens from Ethereum to Aurora.</p>
<ul>
<li>Open the Rainbow Bridge for testnet: <a href="https://testnet.rainbowbridge.app/" target="_blank" rel="noopener noreferrer">https://testnet.rainbowbridge.app/</a></li>
<li>Click New Transfer:</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690544972-screenshot-2023-07-28-at-12-48-40.png" alt="" class="img_jFja"></p>
<ul>
<li>Connect to your accounts on Ethereum and on Aurora:</li>
</ul>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690545004-screenshot-2023-07-28-at-12-48-57.png" alt="" class="img_jFja"></p>
<p>And now, choose USDC.e tokens and amount for transferring, and click <code>Continue</code>:</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1690545027-screenshot-2023-07-28-at-12-49-11.png" alt="" class="img_jFja"></p>
<p>Done! Now you need to wait <em>20 minutes</em> before you get your test USDC on Aurora.</p>
<p><em>Remark</em>: you also can transfer the USDC tokens or other tokens to your Near accounts in the same way.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="conclusion">Conclusion<a href="https://doc.aurora.dev/blog/how-to-get-usdc-tokens-on-aurora-testnet#conclusion" class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion">​</a></h2>
<p>In this short article, we learned how to get a lot of USDC tokens on Ethereum, Near and Aurora. This method is also applicable to other popular Ethereum ERC-20 tokens. Now you can use these tokens to test your contracts. Happy development and testing!</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="references">References<a href="https://doc.aurora.dev/blog/how-to-get-usdc-tokens-on-aurora-testnet#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h2>
<ul>
<li>Article with instructions on how to install MetaMask and mint Ether: <a href="https://doc.aurora.dev/blog/getting-started-with-aurora">/blog/getting-started-with-aurora</a></li>
<li>USDC tokens address on Ethereum Goerli: <a href="https://goerli.etherscan.io/address/0x07865c6e87b9f70255377e024ace6630c1eaa37f" target="_blank" rel="noopener noreferrer">https://goerli.etherscan.io/address/0x07865c6e87b9f70255377e024ace6630c1eaa37f</a></li>
<li>Uniswap: <a href="https://app.uniswap.org/#/swap" target="_blank" rel="noopener noreferrer">https://app.uniswap.org/#/swap</a></li>
<li>Rainbow Bridge For Testnet: <a href="https://testnet.rainbowbridge.app/" target="_blank" rel="noopener noreferrer">https://testnet.rainbowbridge.app/</a></li>
<li>Checking the supported tokens for Rainbow Bridge on Testnet: <a href="https://testnet.rainbowbridge.app/deploy" target="_blank" rel="noopener noreferrer">https://testnet.rainbowbridge.app/deploy</a></li>
</ul>]]></content:encoded>
            <category>Tips &amp; Tricks</category>
        </item>
        <item>
            <title><![CDATA[EVM gas vs. Near gas on Aurora]]></title>
            <link>https://doc.aurora.dev/blog/evm-gas-near-gas-on-aurora</link>
            <guid>https://doc.aurora.dev/blog/evm-gas-near-gas-on-aurora</guid>
            <pubDate>Fri, 07 Jul 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[How the Aurora's EVM gas and Near gas are related? What gas limits do we have, and how Engine optimizations are saving your costs?]]></description>
            <content:encoded><![CDATA[<p>A core piece of Aurora’s technology is the <a href="https://github.com/aurora-is-near/aurora-engine" target="_blank" rel="noopener noreferrer"><em>Aurora Engine smart contract</em></a>, which is an Ethereum Virtual Machine (EVM) implementation deployed as a smart contract on Near. Therefore, Aurora sits at the intersection of both EVM and Near runtimes. It naturally draws us to think about comparisons between EVM and Near.</p>
<p>For example, the concept of “gas” exists in both the EVM and Near’s runtime. The reason is because of the famous <a href="https://en.wikipedia.org/wiki/Halting_problem" target="_blank" rel="noopener noreferrer"><em>halting problem</em></a>, which says we cannot know in advance if an arbitrary computer program will finish in a finite time. In the context of a smart contract platform, this means we must measure (and limit) the computation the contract does at runtime. In both the EVM and Near, “gas” is the unit that is used to measure the computational work done by a smart contract.</p>
<p>Even though EVM gas and Near gas both measure the same thing, they are not identical. One analogy is miles and kilometers; both measure distance, but the numerical value of the same physical distance will be different depending on which unit is used. Computation is a more abstract concept than distance, but this analogy leads us to expect some kind of approximately linear relationship between EVM gas and Near gas, similar to how 1 mile equals 1.61 kilometers.</p>
<p>In this blog post, we explore this question and discuss the implications for developers building on Aurora.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="the-theoretical-relation">The theoretical relation<a href="https://doc.aurora.dev/blog/evm-gas-near-gas-on-aurora#the-theoretical-relation" class="hash-link" aria-label="Direct link to The theoretical relation" title="Direct link to The theoretical relation">​</a></h2>
<p>In theory, we should be able to derive the relationship between EVM gas and Near gas by considering the EVM gas cost of each operation in the EVM and calculating how much Near gas this same operation costs based on its implementation in Aurora. Unfortunately, this is much more difficult in practice than it sounds. The Aurora Engine is written in Rust and compiled to Web Assembly (Wasm).</p>
<p>This compilation process convolutes the conceptual mapping between EVM opcodes and operations in the Near runtime. There are additional complexities in trying to do this calculation in that Aurora virtualizes the whole EVM inside Wasm, and hence how much Near gas an opcode takes may depend on the overall VM state (e.g., because more Wasm memory needs to be allocated).</p>
<p>While it is good to have this idea of being able to calculate the relationship from first principles (and we will revisit it later in this post), it is not a practical way to answer our question. For that, we will use empirical data instead.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="gathering-data">Gathering data<a href="https://doc.aurora.dev/blog/evm-gas-near-gas-on-aurora#gathering-data" class="hash-link" aria-label="Direct link to Gathering data" title="Direct link to Gathering data">​</a></h2>
<p>Data for EVM and Near gas used for all transactions on Aurora is available via a combination of our RPC and Near’s RPC. Consider the following call (done via the command line using the <a href="https://httpie.org/" target="_blank" rel="noopener noreferrer"><em>HTTPie</em></a> tool):</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">http post https://mainnet.aurora.dev/ jsonrpc=2.0 id=1 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  method=eth_getTransactionReceipt \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  params:='["0x4c2b8b5d766fe0411d0003bf4c9d2becc9d6dd7120272cf9f1a6cac73e4c3543"]'</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The parameter in this call can be any hash of a transaction on Aurora (the given one is only an example). Notice the <code>gasUsed</code> field in the response, which gives the (hexadecimal encoded) amount of EVM gas used in the transaction (46,574 in this example).</p>
<p>In addition to the standard response fields defined by the <a href="https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt" target="_blank" rel="noopener noreferrer"><em>Ethereum standard</em></a>, the Aurora RPC returns two other fields: `nearReceiptHash` and `nearTransactionHash`. These give the receipt/transaction hashes corresponding to the underlying transaction that was executed on Near (by the Aurora Engine contract).</p>
<p>To use these extra fields, there is some additional work involved because Near hashes are always presented in <a href="https://digitalbazaar.github.io/base58-spec/" target="_blank" rel="noopener noreferrer"><em>base58 encoding</em></a>, whereas our RPC returns them in hexadecimal encoding (to be consistent with how Ethereum usually presents hashes).</p>
<p>You can read more about this in a <a href="https://doc.aurora.dev/blog/convert-aurora-transaction-into-near-s-one"><em>previous article</em></a>. For our purposes here, it is easy enough to write a <a href="https://gist.github.com/birchmd/a336269596651992ed9b742c843b9b0f" target="_blank" rel="noopener noreferrer"><em>Python script to do the conversion</em></a> for us and chain this together with the <a href="https://jqlang.github.io/jq/" target="_blank" rel="noopener noreferrer"><em>jq tool</em></a> to get the Near transaction hash in one command:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">http post https://mainnet.aurora.dev/ jsonrpc=2.0 id=1 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> method=eth_getTransactionReceipt \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> params:='["0x4c2b8b5d766fe0411d0003bf4c9d2becc9d6dd7120272cf9f1a6cac73e4c3543"]' \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> | jq .result.nearTransactionHash | hex2b58</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>From the Near transaction hash, we can get the amount of Near gas used in the transaction from the Near RPC:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">http post https://archival-rpc.mainnet.near.org jsonrpc=2.0 id=dontcare \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  method=tx \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  params:='[ "46ACGRcUQadezAWQuZ9WVopSAbeeWpJZ1H8hmVuWPhJu", "relay.aurora"]'</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Where the first parameter is the Near transaction hash obtained from the Aurora RPC by the previous command. There is a lot of data returned from the response, but for our purposes, we only care about the gas used in the Aurora Engine execution. We can isolate just this part of the response using <code>jq</code>:</p>
<div class="language-shell codeBlockContainer_JtVw theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_MB_Z"><pre tabindex="0" class="prism-code language-shell codeBlock_fNZX thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_KcFJ"><span class="token-line" style="color:#393A34"><span class="token plain">http post https://archival-rpc.mainnet.near.org jsonrpc=2.0 id=dontcare \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  method=tx \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  params:='[ "46ACGRcUQadezAWQuZ9WVopSAbeeWpJZ1H8hmVuWPhJu", "relay.aurora"]' \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  | jq '.result.receipts_outcome[0].outcome.gas_burnt'</span><br></span></code></pre><div class="buttonGroup_aoDl"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_uX4C" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_nVsK"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_wFAQ"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Given this, it’s pretty easy to automate obtaining the EVM and Near gas data from any Aurora transactions we want!</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="empirical-results">Empirical results<a href="https://doc.aurora.dev/blog/evm-gas-near-gas-on-aurora#empirical-results" class="hash-link" aria-label="Direct link to Empirical results" title="Direct link to Empirical results">​</a></h2>
<p>In what follows, we consider all the successful (i.e., ignoring obvious failures like incorrect nonce – these would be outliers in our data because they don’t do any real EVM execution) Aurora transactions from June 4, 2023 (block height 93442283) to June 12, 2023 (block height 94047083). Below is a plot of EVM gas vs Near gas. The Near numbers have been scaled by 10^12 since Tgas is the common unit Near gas values are presented in, and the EVM numbers have been scaled by 10^3 since the smallest EVM gas possible is 2100.</p>
<p><img decoding="async" loading="lazy" src="https://www.datocms-assets.com/95026/1688079135-screenshot-2023-06-29-at-23-51-52.png" alt="" class="img_jFja"></p>
<p>As expected, there is a strong linear correlation between the values. Though interestingly, there are (at least) 3 distinct lines as opposed to just one.</p>
<p>The line with the shallowest slope (orange line in the plot) corresponds to storage-heavy transactions (e.g., contract deployments). These transactions use a lot of EVM gas but not very much Near gas. The reason is because of the difference in how the EVM charges for storage and how Near charges for it. In the EVM, storage access is pretty expensive in terms of gas, but there is a gas refund when storage is released.</p>
<p>On the other hand, Near does not change much gas for storage access but does charge the account in the form of <a href="https://docs.near.org/concepts/storage/storage-staking" target="_blank" rel="noopener noreferrer"><em>storage staking</em></a> (the account must maintain a minimum Near balance to be allowed to have so much storage used). This difference in how storage is charged means disproportionately less Near gas is used for storage compared to other computational costs (e.g., CPU and memory access).</p>
<p>The majority of points in the plot lie on the steepest line (green line in the plot), though there is a lot of variance around it. Taking a linear regression of this data, we determine the average slope is around 0.122. This provides us an empirical answer to our question of how EVM and Near gas are related on Near. Approximately 1.22 x10^8 Near gas is spent per EVM gas. In fact, this relation is what informs the fixed EVM gas price set by Aurora’s relayers.</p>
<p>The relationship between EVM gas and Near gas allows us to convert Near’s gas price into an EVM gas price to charge our users (of course, most users take advantage of the free transaction available from <a href="https://aurora.dev/blog/introducing-aurora-pass-your-gateway-to-the-decentralized-web" target="_blank" rel="noopener noreferrer"><em>AuroraPass</em></a> and don’t worry about gas prices anyway).</p>
<p>The red line in the plot follows a distinct collection of points between the “storage-heavy” and “main” lines. I do not know what is special about these transactions, which makes them use less Near gas than those on the main trendline. It is difficult to learn high-level information about transactions just from the set of addresses they call and the binary input they send.</p>
<p>One hypothesis could be that these transactions are literally a middle-ground between the two extremes of the gas, primarily coming from CPU costs and primarily coming from storage costs. There could be something about the algorithm the smart contracts implement such that the amount of storage access they need is proportional to the amount of CPU-bound computation they perform. Regardless of the reason, this may be useful information for the developers of those contracts to know since they are able to complete transactions with higher EVM gas values than transactions on the main line.</p>
<p>This data has additional consequences for developers on Aurora. For example, <a href="https://doc.aurora.dev/evm/evm-overview" target="_blank" rel="noopener noreferrer"><em>our documentation</em></a> mentions an edge case incompatibility between Aurora and Ethereum mainnet where a transaction may run out of Near gas before it runs out of EVM gas.</p>
<p>This causes the transaction to fail on Aurora when it would pass on Ethereum. The transaction gas limit on Near (no such concept exists on Ethereum, there is only the block gas limit) is 300 Tgas, which implies that this edge case described in the documentation arises for EVM transactions exceeding approximately 2.5 x 10^6 EVM gas. This assumes the transaction lies on the main trendline, though, as we discussed, there are other kinds of transactions with different Near/EVM gas conversion ratios that can achieve higher EVM gas values.</p>
<h2 class="anchor anchorWithStickyNavbar_wBbR" id="future-directions">Future directions<a href="https://doc.aurora.dev/blog/evm-gas-near-gas-on-aurora#future-directions" class="hash-link" aria-label="Direct link to Future directions" title="Direct link to Future directions">​</a></h2>
<p>For us internally at Aurora, this plot also gives us a clear metric for our Engine’s performance. Our goal is to process EVM transactions as efficiently as possible (i.e., use as little Near gas as possible per EVM gas), which corresponds to lowering the slope of the main trendline in the EVM gas vs. Near gas plot.</p>
<p>Since Aurora launched, we have made a lot of progress in this respect: more than a factor of 2 improvement since February 2022 (Engine v2.4.0 vs. v2.9.0).  But we still have more work to do. We would like to make the amount of EVM gas that fits into 300 Near Tgas equal to the Ethereum block gas limit (30 x 10^6 EVM gas) so that our developers no longer need to worry about the edge case discussed above.</p>
<p>Because, in this case, we will be sure that no EVM transaction which succeeds on the Ethereum mainnet can exceed 300TGas on Near. Going back to the theoretical argument from earlier in the article, we know that we should be able to improve the Engine’s efficiency by changing the implementation details. In particular, the overhead of running an EVM interpreter must contribute to the Near gas cost significantly.</p>
<p>Our next innovation towards this goal is to develop an <a href="https://github.com/aurora-is-near/evm2near" target="_blank" rel="noopener noreferrer"><em>EVM to Wasm compiler</em></a>. Such a compiler will allow directly executing EVM contracts in the Near runtime instead of needing to interpret them within a virtualized EVM. Some <a href="https://github.com/aurora-is-near/aurora-engine/pull/463" target="_blank" rel="noopener noreferrer"><em>simple benchmarking data</em></a> suggests that we should be able to get orders of magnitude performance improvements using this kind of approach.</p>]]></content:encoded>
            <category>Core Tech</category>
        </item>
    </channel>
</rss>