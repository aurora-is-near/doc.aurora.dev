"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[428],{9613:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(9496);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(f,c(c({ref:t},u),{},{components:n})):a.createElement(f,c({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,c=new Array(r);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,c[1]=i;for(var s=2;s<r;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6410:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(1163),o=(n(9496),n(9613));const r={title:"Get account data"},c=void 0,i={unversionedId:"build-a-dapp/frontend/account",id:"build-a-dapp/frontend/account",title:"Get account data",description:"We can re-use the project from the Connect Wallet article to demonstrate how to get the basic account information about your user.",source:"@site/docs/build-a-dapp/frontend/account.md",sourceDirName:"build-a-dapp/frontend",slug:"/build-a-dapp/frontend/account",permalink:"/build-a-dapp/frontend/account",draft:!1,editUrl:"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/docs/build-a-dapp/frontend/account.md",tags:[],version:"current",frontMatter:{title:"Get account data"},sidebar:"tutorialSidebar",previous:{title:"Connect a wallet",permalink:"/build-a-dapp/frontend/connect-wallet"},next:{title:"Send transactions",permalink:"/build-a-dapp/frontend/transactions"}},l={},s=[{value:"Account data",id:"account-data",level:2},{value:"Balance of native token",id:"balance-of-native-token",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We can re-use the project from the ",(0,o.kt)("a",{parentName:"p",href:"/build-a-dapp/frontend/connect-wallet"},"Connect Wallet")," article to demonstrate how to get the basic account information about your user."),(0,o.kt)("p",null,"We will get the chain information, address and the native coin balance. The final result will look like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"dapp_account_info.png",src:n(158).Z,width:"1234",height:"358"})),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can see the same React component shown on the Preview tab of the StackBlitz widget example below, after you connect your wallet to it.")),(0,o.kt)("p",null,"We will focus on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Account")," component code in this article:"),(0,o.kt)("iframe",{width:"700",height:"500",src:"https://stackblitz.com/edit/vitejs-vite-muf79v?embed=1&file=src%2FApp.tsx,src%2Fcomponents%2FAccount.tsx&view=editor",style:{display:"block",margin:"auto"},title:"Connect wallet",frameborder:"auto",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,o.kt)("h2",{id:"account-data"},"Account data"),(0,o.kt)("p",null," To get the account data all you need is Wagmi's ",(0,o.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useAccount"},"useAccount")," hook:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"[components/Account.tsx]","[components/Account.tsx]":!0},'import { useAccount } from \'wagmi\';\n\nexport function Account() {\n const { address, connector, chain } = useAccount();\n ...\n <div className="stack">\n   {address && <div className="text">{formattedAddress}</div>}\n   <div className="subtext">\n     Connector: {connector?.name}\n     <br></br>\n     {chain && <span> Chain: {chain.name} </span>}\n     <br></br>\n      ...\n     </div>\n </div>\n}\n')),(0,o.kt)("p",null," You can get the user address, the connector they are using and the chain they are connected to.\nThere are more fields go get from it, please read ",(0,o.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useAccount#return-type"},"the UseAccountReturnType object documentation here")," to learn more."),(0,o.kt)("h2",{id:"balance-of-native-token"},"Balance of native token"),(0,o.kt)("p",null,"To get a balance of ETH (or any other native token), you need to use ",(0,o.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useBalance"},"useBalance")," hook:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"[components/Account.tsx]","[components/Account.tsx]":!0},"import { useBalance } from 'wagmi';\n\nexport function Account() {\nconst balance = useBalance({ address: address });\n...\n//to display the value, you need to access the formatted field via .data.formatted\n  {balance && <span> Balance: {balance.data.formatted} ETH</span>}\n...\n}\n")),(0,o.kt)("p",null,"As you can see, to display the value, you need to access the formatted field via ",(0,o.kt)("inlineCode",{parentName:"p"},".data.formatted"),". You can read more about ",(0,o.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useBalance#return-type"},"the UseBalanceReturnType structure here"),"."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You can also just use ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," for such objects to see their structure in your browser console right away.")),(0,o.kt)("p",null,"We will talk about how to get balances of ERC-20 tokens in the next article, because to do that you will need to read from the token contract directly."))}d.isMDXComponent=!0},158:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dapp_account_info-c21b300c6234049f2baa0d4aa93309c7.png"}}]);