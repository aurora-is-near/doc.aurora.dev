"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[6338],{9429:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(3274),a=t(7507);const o={title:"ERC-721 NFT Token"},i=void 0,s={id:"build-a-dapp/contracts/nft",title:"ERC-721 NFT Token",description:"In this article, we will consider an ERC-721 NFT contract example. You will learn how to deploy and interact with it.",source:"@site/docs/build-a-dapp/contracts/nft.md",sourceDirName:"build-a-dapp/contracts",slug:"/build-a-dapp/contracts/nft",permalink:"/build-a-dapp/contracts/nft",draft:!1,unlisted:!1,editUrl:"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/docs/build-a-dapp/contracts/nft.md",tags:[],version:"current",frontMatter:{title:"ERC-721 NFT Token"},sidebar:"developers",previous:{title:"ERC-20 Token",permalink:"/build-a-dapp/contracts/erc-20"},next:{title:"Connect a wallet",permalink:"/build-a-dapp/frontend/connect-wallet"}},c={},l=[{value:"Vaccine NFT Token Lifecycle",id:"vaccine-nft-token-lifecycle",level:2},{value:"Create project",id:"create-project",level:2},{value:"Configure project",id:"configure-project",level:2},{value:"Deploy contract",id:"deploy-contract",level:2},{value:"Playing with the Truffle Console",id:"playing-with-the-truffle-console",level:2},{value:"Mint tokens",id:"mint-tokens",level:3},{value:"Transfer tokens",id:"transfer-tokens",level:3},{value:"Burn tokens",id:"burn-tokens",level:3},{value:"Redistribute tokens",id:"redistribute-tokens",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In this article, we will consider an ERC-721 NFT contract example. You will learn how to deploy and interact with it."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["In case you are not familiar with a standard we advise you to read more about it on the OpenZeppelin website:\n",(0,r.jsx)(n.a,{href:"https://docs.openzeppelin.com/contracts/5.x/erc721",children:"ERC-721 article"})," and ",(0,r.jsx)(n.a,{href:"https://docs.openzeppelin.com/contracts/5.x/api/token/erc721",children:"ERC-20 API"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"Here is the full contract code below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-solidity",children:'\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\nimport "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";\nimport "@openzeppelin/contracts/utils/Counters.sol";\n\ncontract CovidVaccineToken is ERC721URIStorage {\n    uint256 private _tokensCount = 0;\n    address public minter = address(0);\n\n    modifier onlyMinter(){\n        require(\n            minter == msg.sender,\n            \'Invalid Minter\'\n        );\n        _;\n    }\n\n    constructor() ERC721("CovidVaccineToken", "CVT") {\n        minter = msg.sender;\n    }\n\n    function mint(address to) external onlyMinter {\n        uint256 tokenId = _tokensCount + 1;\n        _mint(to, tokenId);\n        _tokensCount = tokenId;\n    }\n\n    function burn(uint256 tokenId) external {\n        _burn(tokenId);\n        _tokensCount -= 1;\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        require(minter == msg.sender || to == minter, \'Invalid Transfer\');\n        safeTransferFrom(from, to, tokenId, "");\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(minter == msg.sender || to == minter, \'Invalid Transfer\');\n        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You can find ",(0,r.jsx)(n.a,{href:"https://github.com/aurora-is-near/aurora-examples/blob/main/truffle/erc721-example/",children:"a GitHub repo"}),"\nand ",(0,r.jsx)(n.a,{href:"https://dev.aurora.dev/ecosystem/truffle",children:"another version of this tutorial"})," on Aurora Developer Portal."]})}),"\n",(0,r.jsxs)(n.p,{children:["This example is originally forked from the ",(0,r.jsx)(n.a,{href:"https://docs.openzeppelin.com/contracts/4.x/erc721",children:"OpenZeppelin\nexamples"}),". However, the code\nhas been changed to fit the use case of this tutorial. The use case is about how\nto deploy and manage the life cycle of a simple COVID-19 vaccine NFT token \ud83d\udc8a\nusing Truffle on the Aurora Testnet."]}),"\n",(0,r.jsx)(n.h2,{id:"vaccine-nft-token-lifecycle",children:"Vaccine NFT Token Lifecycle"}),"\n",(0,r.jsx)(n.p,{children:"On the image below you can observe how a lifecycle of the Vaccine NFT token looks like:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Truffle NFT example",src:t(8477).A+"",width:"615",height:"331"})}),"\n",(0,r.jsx)(n.p,{children:"Let's describe it step by step:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The minter address (which is managed by the vaccination program manager) can\ndistribute (mint) the vaccine tickets (NFT tokens \ud83d\udc8a) to the people who are\npart of the vaccination program."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"When participants receive the tokens \ud83d\udc8a, they can get access to the vaccine\nby spending the NFT token."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"This means either burning the NFT token or sending it back to the minter\naddress."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If the participant chooses to send it back then the minter can redistribute\nthat token to the other participant in the line."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Then the new participant will have access to the same vaccine token that has\nbeen used by the previous participant."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"create-project",children:"Create project"}),"\n",(0,r.jsxs)(n.p,{children:["To create a project, clone the examples repository, go to ",(0,r.jsx)(n.code,{children:"erc-721-example"})," folder, and install ",(0,r.jsx)(n.code,{children:"yarn"})," dependencies:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/aurora-is-near/aurora-examples.git\ncd aurora-examples/truffle/erc721-example/\nyarn install\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configure-project",children:"Configure project"}),"\n",(0,r.jsx)(n.p,{children:"Add your Mnemonic (from MetaMask or other Web3 wallet) to the environment variable:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:" export MNEMONIC='YOUR MNEMONIC HERE'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now in ",(0,r.jsx)(n.code,{children:"truffle-config.js"}),", you will need to change the ",(0,r.jsx)(n.code,{children:"from"})," address as shown\nbelow in the ",(0,r.jsx)(n.code,{children:"aurora"})," network section:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:"...\naurora: {\n  provider: () => setupWallet('https://testnet.aurora.dev'),\n  network_id: 0x4e454153,\n  gas: 10000000,\n  from: 0x6A33382de9f73B846878a57500d055B981229ac4 // change this to your address here\n},\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"truffle-config.js"})," configuration will pick up your ",(0,r.jsx)(n.code,{children:"MNEMONIC"})," environment\nvariable and recover the address that will be used for sending and signing\ntransactions on the Aurora network."]}),"\n",(0,r.jsx)(n.h2,{id:"deploy-contract",children:"Deploy contract"}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["To use the commands below you will need Node.js and ",(0,r.jsx)(n.code,{children:"yarn"})," to be installed. Please follow the ",(0,r.jsx)(n.a,{href:"https://nodejs.org/en/download/package-manager",children:"instructions here"})," to install Node.js.\nThen, install ",(0,r.jsx)(n.code,{children:"yarn"})," with ",(0,r.jsx)(n.code,{children:"npm install --global yarn"})," or read more ",(0,r.jsx)(n.a,{href:"https://classic.yarnpkg.com/lang/en/docs/install/",children:"here"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["To deploy the ",(0,r.jsx)(n.code,{children:"CovidVaccineToken"})," contract, you can run the ",(0,r.jsx)(n.code,{children:"yarn"})," command as\nfollows:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn deploy:aurora\n....\n_deploy_contracts.js\n=====================\n\n   Deploying 'CovidVaccineToken'\n   -----------------------------\n   > transaction hash:    0x282012c791d65d0ce2fd1fd9fcc41179dba5bd06c3b02e31e53dbe9cc8af62c1\n   > Blocks: 7            Seconds: 5\n   > contract address:    0x3635D999d8CdA2fAf304b390fb26a9c2f364dFbd\n   > block number:        49151611\n   > block timestamp:     1622034185\n   > account:             0x6A33382de9f73B846878a57500d055B981229ac4\n   > balance:             0\n   > gas used:            2576274 (0x274f92)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.05152548 ETH\n....\n"})}),"\n",(0,r.jsx)(n.h2,{id:"playing-with-the-truffle-console",children:"Playing with the Truffle Console"}),"\n",(0,r.jsxs)(n.p,{children:["Now you can test the flow as mentioned in the ",(0,r.jsx)(n.a,{href:"#nft-example",children:"NFT Example"}),"\nsection:"]}),"\n",(0,r.jsx)(n.h3,{id:"mint-tokens",children:"Mint tokens"}),"\n",(0,r.jsxs)(n.p,{children:["The minter mints and transfers NFT tokens for the vaccine program participant.\nIn this example, the new participant address is\n",(0,r.jsx)(n.code,{children:"accounts[1]"})," and the minter address is ",(0,r.jsx)(n.code,{children:"accounts[0]"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["Please make sure that you are using the same deployer address as a minter\naddress, otherwise the ",(0,r.jsx)(n.code,{children:"mint"})," transaction will revert."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"% truffle console --network aurora\ntruffle(aurora)> const cvt = await CovidVaccineToken.deployed()\ntruffle(aurora)> const minter = accounts[0]\ntruffle(aurora)> const participant = accounts[1]\ntruffle(aurora)> await cvt.minter() == minter\ntrue\ntruffle(aurora)> await cvt.mint(participant, {from: minter})\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should notice that none of the participants are allowed to transfer their\nNFT tokens to anyone except back to the minter."}),"\n",(0,r.jsxs)(n.p,{children:["So let's try to use any participant address to validate this. To do that, change\nthe value of ",(0,r.jsx)(n.code,{children:"from"})," to ",(0,r.jsx)(n.code,{children:"accounts[1]"}),", so that the sender will be the first\nparticipant (e.g., the participant address\n",(0,r.jsx)(n.code,{children:"0x2531a4D108619a20ACeE88C4354a50e9aC48ecfe"}),")."]}),"\n",(0,r.jsx)(n.p,{children:"In the Truffle console:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"truffle(aurora)> await cvt.safeTransferFrom(participant, accounts[2], 1, {from: participant})\nUncaught Error: execution reverted:\n...\nreason: 'Invalid Transfer',\n  hijackedStack: 'Error: execution reverted:\\n'\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is exactly the same error message we have in our NFT contract in\n",(0,r.jsx)(n.code,{children:"safeTransferFrom"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-solidity",children:"function safeTransferFrom(\n    address from, \n    address to, \n    uint256 tokenId\n) \n    public \n    virtual \n    override \n    {\n        require(\n            minter == msg.sender || to == minter,\n            'Invalid Transfer'\n        );\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n"})}),"\n",(0,r.jsx)(n.h3,{id:"transfer-tokens",children:"Transfer tokens"}),"\n",(0,r.jsxs)(n.p,{children:["Participants can transfer the token to the minter after receiving the vaccine.\nAs shown below, a participant can only send the NFT token if the receiver for\nthis token is the minter (",(0,r.jsx)(n.code,{children:"accounts[0]"}),")."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"truffle(aurora)> const tokenID = 1\ntruffle(aurora)> await cvt.ownerOf(tokenID) == participant\ntrue\ntruffle(aurora)> await cvt.safeTransferFrom(participant, minter, tokenID, {from: participant})\ntruffle(aurora)> await cvt.ownerOf(tokenID) == minter\ntrue\n"})}),"\n",(0,r.jsx)(n.h3,{id:"burn-tokens",children:"Burn tokens"}),"\n",(0,r.jsxs)(n.p,{children:["This is an alternative scenario for the NFT token lifecycle. Instead of\ntransferring the token back to the minter, the participant can decide to burn the\nNFT token by calling the ",(0,r.jsx)(n.code,{children:"burn"})," function:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"truffle(aurora)> await cvt.burn(1, {from: participant}) // 1 is the tokenID\n"})}),"\n",(0,r.jsx)(n.h3,{id:"redistribute-tokens",children:"Redistribute tokens"}),"\n",(0,r.jsx)(n.p,{children:"Finally, the minter can send the same token (if not burnt) to a new participant\nin the line:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"truffle(aurora)> await cvt.safeTransferFrom(minter, accounts[2], 1, {from: minter})\ntruffle(aurora)> await cvt.ownerOf(1) == accounts[2]\ntrue\n"})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(n.p,{children:"In this simple tutorial, we deployed an NFT contract to the Aurora Testnet using\nTruffle and interacted with the contract's functions."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8477:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/truffle_nft_example-828793b03a07609500ab60ac2663e43e.png"},7507:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(9474);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);