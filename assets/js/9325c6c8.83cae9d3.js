"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[7315],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4728:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(1163),r=(n(9496),n(9613));const o={title:"ERC-721 NFT Token"},i=void 0,l={unversionedId:"build-a-dapp/contracts/nft",id:"build-a-dapp/contracts/nft",title:"ERC-721 NFT Token",description:"In this article, we will consider an ERC-721 NFT contract example. You will learn how to deploy and interact with it.",source:"@site/docs/build-a-dapp/contracts/nft.md",sourceDirName:"build-a-dapp/contracts",slug:"/build-a-dapp/contracts/nft",permalink:"/build-a-dapp/contracts/nft",draft:!1,editUrl:"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/docs/build-a-dapp/contracts/nft.md",tags:[],version:"current",frontMatter:{title:"ERC-721 NFT Token"},sidebar:"tutorialSidebar",previous:{title:"ERC-20 Token",permalink:"/build-a-dapp/contracts/erc-20"},next:{title:"Connect a wallet",permalink:"/build-a-dapp/frontend/connect-wallet"}},s={},c=[{value:"Vaccine NFT Token Lifecycle",id:"vaccine-nft-token-lifecycle",level:2},{value:"Create project",id:"create-project",level:2},{value:"Configure project",id:"configure-project",level:2},{value:"Deploy contract",id:"deploy-contract",level:2},{value:"Playing with the Truffle Console",id:"playing-with-the-truffle-console",level:2},{value:"Mint tokens",id:"mint-tokens",level:3},{value:"Transfer tokens",id:"transfer-tokens",level:3},{value:"Burn tokens",id:"burn-tokens",level:3},{value:"Redistribute tokens",id:"redistribute-tokens",level:3},{value:"Summary",id:"summary",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this article, we will consider an ERC-721 NFT contract example. You will learn how to deploy and interact with it."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In case you are not familiar with a standard we advise you to read more about it on the OpenZeppelin website:\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/5.x/erc721"},"ERC-721 article")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/5.x/api/token/erc721"},"ERC-20 API"),".")),(0,r.kt)("p",null,"Here is the full contract code below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC721/ERC721.sol";\nimport "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";\nimport "@openzeppelin/contracts/utils/Counters.sol";\n\ncontract CovidVaccineToken is ERC721URIStorage {\n    uint256 private _tokensCount = 0;\n    address public minter = address(0);\n\n    modifier onlyMinter(){\n        require(\n            minter == msg.sender,\n            \'Invalid Minter\'\n        );\n        _;\n    }\n\n    constructor() ERC721("CovidVaccineToken", "CVT") {\n        minter = msg.sender;\n    }\n\n    function mint(address to) external onlyMinter {\n        uint256 tokenId = _tokensCount + 1;\n        _mint(to, tokenId);\n        _tokensCount = tokenId;\n    }\n\n    function burn(uint256 tokenId) external {\n        _burn(tokenId);\n        _tokensCount -= 1;\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        require(minter == msg.sender || to == minter, \'Invalid Transfer\');\n        safeTransferFrom(from, to, tokenId, "");\n    }\n\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(minter == msg.sender || to == minter, \'Invalid Transfer\');\n        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can find ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/aurora-is-near/aurora-examples/blob/main/truffle/erc721-example/"},"a GitHub repo"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://dev.aurora.dev/ecosystem/truffle"},"another version of this tutorial")," on Aurora Developer Portal.")),(0,r.kt)("p",null,"This example is originally forked from the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/4.x/erc721"},"OpenZeppelin\nexamples"),". However, the code\nhas been changed to fit the use case of this tutorial. The use case is about how\nto deploy and manage the life cycle of a simple COVID-19 vaccine NFT token \ud83d\udc8a\nusing Truffle on the Aurora Testnet."),(0,r.kt)("h2",{id:"vaccine-nft-token-lifecycle"},"Vaccine NFT Token Lifecycle"),(0,r.kt)("p",null,"On the image below you can observe how a lifecycle of the Vaccine NFT token looks like:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Truffle NFT example",src:n(532).Z,width:"615",height:"331"})),(0,r.kt)("p",null,"Let's describe it step by step:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"The minter address (which is managed by the vaccination program manager) can\ndistribute (mint) the vaccine tickets (NFT tokens \ud83d\udc8a) to the people who are\npart of the vaccination program.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"When participants receive the tokens \ud83d\udc8a, they can get access to the vaccine\nby spending the NFT token.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"This means either burning the NFT token or sending it back to the minter\naddress.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If the participant chooses to send it back then the minter can redistribute\nthat token to the other participant in the line.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Then the new participant will have access to the same vaccine token that has\nbeen used by the previous participant."))),(0,r.kt)("h2",{id:"create-project"},"Create project"),(0,r.kt)("p",null,"To create a project, clone the examples repository, go to ",(0,r.kt)("inlineCode",{parentName:"p"},"erc-721-example")," folder, and install ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," dependencies:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/aurora-is-near/aurora-examples.git\ncd aurora-examples/truffle/erc721-example/\nyarn install\n")),(0,r.kt)("h2",{id:"configure-project"},"Configure project"),(0,r.kt)("p",null,"Add your Mnemonic (from MetaMask or other Web3 wallet) to the environment variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"}," export MNEMONIC='YOUR MNEMONIC HERE'\n")),(0,r.kt)("p",null,"Now in ",(0,r.kt)("inlineCode",{parentName:"p"},"truffle-config.js"),", you will need to change the ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," address as shown\nbelow in the ",(0,r.kt)("inlineCode",{parentName:"p"},"aurora")," network section:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},"...\naurora: {\n  provider: () => setupWallet('https://testnet.aurora.dev'),\n  network_id: 0x4e454153,\n  gas: 10000000,\n  from: 0x6A33382de9f73B846878a57500d055B981229ac4 // change this to your address here\n},\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"truffle-config.js")," configuration will pick up your ",(0,r.kt)("inlineCode",{parentName:"p"},"MNEMONIC")," environment\nvariable and recover the address that will be used for sending and signing\ntransactions on the Aurora network."),(0,r.kt)("h2",{id:"deploy-contract"},"Deploy contract"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To use the commands below you will need Node.js and ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," to be installed. Please follow the ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en/download/package-manager"},"instructions here")," to install Node.js.\nThen, install ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install --global yarn")," or read more ",(0,r.kt)("a",{parentName:"p",href:"https://classic.yarnpkg.com/lang/en/docs/install/"},"here"),".")),(0,r.kt)("p",null,"To deploy the ",(0,r.kt)("inlineCode",{parentName:"p"},"CovidVaccineToken")," contract, you can run the ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," command as\nfollows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn deploy:aurora\n....\n_deploy_contracts.js\n=====================\n\n   Deploying 'CovidVaccineToken'\n   -----------------------------\n   > transaction hash:    0x282012c791d65d0ce2fd1fd9fcc41179dba5bd06c3b02e31e53dbe9cc8af62c1\n   > Blocks: 7            Seconds: 5\n   > contract address:    0x3635D999d8CdA2fAf304b390fb26a9c2f364dFbd\n   > block number:        49151611\n   > block timestamp:     1622034185\n   > account:             0x6A33382de9f73B846878a57500d055B981229ac4\n   > balance:             0\n   > gas used:            2576274 (0x274f92)\n   > gas price:           20 gwei\n   > value sent:          0 ETH\n   > total cost:          0.05152548 ETH\n....\n")),(0,r.kt)("h2",{id:"playing-with-the-truffle-console"},"Playing with the Truffle Console"),(0,r.kt)("p",null,"Now you can test the flow as mentioned in the ",(0,r.kt)("a",{parentName:"p",href:"#nft-example"},"NFT Example"),"\nsection:"),(0,r.kt)("h3",{id:"mint-tokens"},"Mint tokens"),(0,r.kt)("p",null,"The minter mints and transfers NFT tokens for the vaccine program participant.\nIn this example, the new participant address is\n",(0,r.kt)("inlineCode",{parentName:"p"},"accounts[1]")," and the minter address is ",(0,r.kt)("inlineCode",{parentName:"p"},"accounts[0]"),"."),(0,r.kt)("p",null,"Please make sure that you are using the same deployer address as a minter\naddress, otherwise the ",(0,r.kt)("inlineCode",{parentName:"p"},"mint")," transaction will revert."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"% truffle console --network aurora\ntruffle(aurora)> const cvt = await CovidVaccineToken.deployed()\ntruffle(aurora)> const minter = accounts[0]\ntruffle(aurora)> const participant = accounts[1]\ntruffle(aurora)> await cvt.minter() == minter\ntrue\ntruffle(aurora)> await cvt.mint(participant, {from: minter})\n")),(0,r.kt)("p",null,"You should notice that none of the participants are allowed to transfer their\nNFT tokens to anyone except back to the minter."),(0,r.kt)("p",null,"So let's try to use any participant address to validate this. To do that, change\nthe value of ",(0,r.kt)("inlineCode",{parentName:"p"},"from")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"accounts[1]"),", so that the sender will be the first\nparticipant (e.g., the participant address\n",(0,r.kt)("inlineCode",{parentName:"p"},"0x2531a4D108619a20ACeE88C4354a50e9aC48ecfe"),")."),(0,r.kt)("p",null,"In the Truffle console:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"truffle(aurora)> await cvt.safeTransferFrom(participant, accounts[2], 1, {from: participant})\nUncaught Error: execution reverted:\n...\nreason: 'Invalid Transfer',\n  hijackedStack: 'Error: execution reverted:\\n'\n")),(0,r.kt)("p",null,"This is exactly the same error message we have in our NFT contract in\n",(0,r.kt)("inlineCode",{parentName:"p"},"safeTransferFrom"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},"function safeTransferFrom(\n    address from, \n    address to, \n    uint256 tokenId\n) \n    public \n    virtual \n    override \n    {\n        require(\n            minter == msg.sender || to == minter,\n            'Invalid Transfer'\n        );\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n")),(0,r.kt)("h3",{id:"transfer-tokens"},"Transfer tokens"),(0,r.kt)("p",null,"Participants can transfer the token to the minter after receiving the vaccine.\nAs shown below, a participant can only send the NFT token if the receiver for\nthis token is the minter (",(0,r.kt)("inlineCode",{parentName:"p"},"accounts[0]"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"truffle(aurora)> const tokenID = 1\ntruffle(aurora)> await cvt.ownerOf(tokenID) == participant\ntrue\ntruffle(aurora)> await cvt.safeTransferFrom(participant, minter, tokenID, {from: participant})\ntruffle(aurora)> await cvt.ownerOf(tokenID) == minter\ntrue\n")),(0,r.kt)("h3",{id:"burn-tokens"},"Burn tokens"),(0,r.kt)("p",null,"This is an alternative scenario for the NFT token lifecycle. Instead of\ntransferring the token back to the minter, the participant can decide to burn the\nNFT token by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"burn")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"truffle(aurora)> await cvt.burn(1, {from: participant}) // 1 is the tokenID\n")),(0,r.kt)("h3",{id:"redistribute-tokens"},"Redistribute tokens"),(0,r.kt)("p",null,"Finally, the minter can send the same token (if not burnt) to a new participant\nin the line:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"truffle(aurora)> await cvt.safeTransferFrom(minter, accounts[2], 1, {from: minter})\ntruffle(aurora)> await cvt.ownerOf(1) == accounts[2]\ntrue\n")),(0,r.kt)("h2",{id:"summary"},"Summary"),(0,r.kt)("p",null,"In this simple tutorial, we deployed an NFT contract to the Aurora Testnet using\nTruffle and interacted with the contract's functions."))}u.isMDXComponent=!0},532:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/truffle_nft_example-828793b03a07609500ab60ac2663e43e.png"}}]);