"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[1350],{1161:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"build-a-dapp/contracts/erc-20","title":"ERC-20 Token","description":"In this article, we will consider a bit more complex, yet standard example of an ERC-20 token contract.","source":"@site/docs/build-a-dapp/contracts/erc-20.md","sourceDirName":"build-a-dapp/contracts","slug":"/build-a-dapp/contracts/erc-20","permalink":"/build-a-dapp/contracts/erc-20","draft":false,"unlisted":false,"editUrl":"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/docs/build-a-dapp/contracts/erc-20.md","tags":[],"version":"current","frontMatter":{"title":"ERC-20 Token"},"sidebar":"developers","previous":{"title":"Simple Counter","permalink":"/build-a-dapp/contracts/counter"},"next":{"title":"ERC-721 NFT Token","permalink":"/build-a-dapp/contracts/nft"}}');var r=t(3274),o=t(7507);const s={title:"ERC-20 Token"},c=void 0,i={},l=[{value:"Create project",id:"create-project",level:2},{value:"Configure project",id:"configure-project",level:2},{value:"Deploy contract",id:"deploy-contract",level:2},{value:"Interact with contract",id:"interact-with-contract",level:2},{value:"Get total supply",id:"get-total-supply",level:3},{value:"Transfer tokens",id:"transfer-tokens",level:3},{value:"Get a balance",id:"get-a-balance",level:3},{value:"Approve and TransferFrom",id:"approve-and-transferfrom",level:3},{value:"Switch a network",id:"switch-a-network",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In this article, we will consider a bit more complex, yet standard example of an ERC-20 token contract."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["In case you are not familiar with a standard we advise you to read more about it on the OpenZeppelin website:\n",(0,r.jsx)(n.a,{href:"https://docs.openzeppelin.com/contracts/5.x/erc20",children:"ERC-20 article"})," and ",(0,r.jsx)(n.a,{href:"https://docs.openzeppelin.com/contracts/5.x/api/token/erc20",children:"ERC-20 API"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"Here is the full contract code below:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-solidity",metastring:'title="contracts/WatermelonToken.sol"',children:'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract WatermelonToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("Watermelon", "WTM") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    function decimals() public pure override(ERC20) returns (uint8) {\n        return 0;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"As you can see, the implementation is just as simple as inheriting from OpenZeppelin's ERC20 contract.\nNotice two modifications done to the standard implementation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["During the construction, all of the ",(0,r.jsx)(n.code,{children:"initialSupply"})," is minted to the contract deployer."]}),"\n",(0,r.jsx)(n.li,{children:"Decimals are set to zero."}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["You can find ",(0,r.jsx)(n.a,{href:"https://github.com/aurora-is-near/aurora-examples/blob/main/hardhat/erc20/",children:"a GitHub repo here"}),"\nand ",(0,r.jsx)(n.a,{href:"https://dev.aurora.dev/ecosystem/hardhat",children:"another version of this tutorial"})," on Aurora Developer Portal."]})}),"\n",(0,r.jsx)(n.h2,{id:"create-project",children:"Create project"}),"\n",(0,r.jsxs)(n.p,{children:["To create a project, clone the examples repository and go to ",(0,r.jsx)(n.code,{children:"erc-20"})," folder:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/aurora-is-near/aurora-examples.git\ncd aurora-examples/hardhat/erc20/\nyarn install\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configure-project",children:"Configure project"}),"\n",(0,r.jsxs)(n.p,{children:["Add your Aurora Private key (from MetaMask or other Web3 wallet) to ",(0,r.jsx)(n.code,{children:"__.env__"})," file:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'$ echo "AURORA_PRIVATE_KEY=YOUR_AURORA_PRIVATE_KEY_HERE" >> .env\n'})}),"\n",(0,r.jsx)(n.h2,{id:"deploy-contract",children:"Deploy contract"}),"\n",(0,r.jsx)(n.p,{children:"This example is about a naive Watermelon token \ud83c\udf49. The total supply is 1,000,000, the\nminter is the contract deployer address, and the decimals are 0, so one token is one non-divisible watermelon."}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsxs)(n.p,{children:["To use the commands below you will need Node.js and ",(0,r.jsx)(n.code,{children:"yarn"})," to be installed. Please follow the ",(0,r.jsx)(n.a,{href:"https://nodejs.org/en/download/package-manager",children:"instructions here"})," to install Node.js.\nThen, install ",(0,r.jsx)(n.code,{children:"yarn"})," with ",(0,r.jsx)(n.code,{children:"npm install --global yarn"})," or read more ",(0,r.jsx)(n.a,{href:"https://classic.yarnpkg.com/lang/en/docs/install/",children:"here"}),"."]})}),"\n",(0,r.jsx)(n.p,{children:"To deploy the token contract, use the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"make deploy NETWORK=testnet_aurora\n"})}),"\n",(0,r.jsx)(n.p,{children:"You will see the next output with your Token Address on your screen:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn hardhat run scripts/deploy.js --network testnet_aurora\nyarn run v1.22.10\n\nDeploying contracts with the account: 0x6A33382de9f73B846878a57500d055B981229ac4\nAccount balance: 2210010200000000000\nWatermelonToken deployed to: 0xD7f2A76F5DA173043E6c61a0A18D835809A07766\n\u2728  Done in 14.96s.\n"})}),"\n",(0,r.jsx)(n.p,{children:"You should also export your Token Address as an environment variable to re-use later during CLI interactions with the contract:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# export the token address\nexport TOKEN_ADDRESS='YOUR OUTPUT FROM DEPLOY (e.g. 0xD7f2A76F5DA173043E6c61a0A18D835809A07766)'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"interact-with-contract",children:"Interact with contract"}),"\n",(0,r.jsx)(n.p,{children:"We will use Hardhat tasks to take care of parsing the values provided for each parameter.\nIt gets the values, performs the type validation and converts them into your desired type."}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we will go through a set of predefined Hardhat tasks that use the ",(0,r.jsx)(n.a,{href:"https://hardhat.org/advanced/hardhat-runtime-environment.html",children:"Hardhat Runtime Environment"}),"."]}),"\n",(0,r.jsxs)(n.admonition,{type:"note",children:[(0,r.jsx)(n.p,{children:"The Hardhat Runtime Environment is an object containing all the functionality that Hardhat exposes when running a task, test or script. In reality, Hardhat is the HRE."}),(0,r.jsxs)(n.p,{children:["To communicate with contracts from UI you will need a web3-library like ",(0,r.jsx)(n.a,{href:"https://viem.sh/docs/introduction",children:"viem"}),", ",(0,r.jsx)(n.a,{href:"https://docs.ethers.org/",children:"ethers.js"})," or ",(0,r.jsx)(n.a,{href:"https://web3js.readthedocs.io/en",children:"web3.js"}),".\nHardhat uses ethers.js by default."]})]}),"\n",(0,r.jsx)(n.p,{children:"If you want to complete all steps of this tutorial, you should execute the tasks in the same order they are mentioned below.\nBut if you want just take a look at how to interact with some particular method - you can just use the code snippet as is."}),"\n",(0,r.jsx)(n.h3,{id:"get-total-supply",children:"Get total supply"}),"\n",(0,r.jsxs)(n.p,{children:["The following task script gets the total supply of the Watermelon ERC-20 token.\nFirst, it gets the token contract, then gets the sender address and then retrieves the total supply\nby calling ",(0,r.jsx)(n.code,{children:"totalSupply()"})," method in our ERC-20 contract:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'task("totalSupply", "Total supply of ERC-20 token")\n.addParam("token", "Token address")\n.setAction(async function ({ token }, { ethers: { getSigners } }, runSuper) {\n  const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n  const watermelon = watermelonToken.attach(token)\n  const [minter] = await ethers.getSigners();\n  const totalSupply = (await (await watermelon.connect(minter)).totalSupply()).toNumber()\n  console.log(`Total Supply is ${totalSupply}`);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"To get the total supply, just use the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat totalSupply --token $TOKEN_ADDRESS --network testnet_aurora\n"})}),"\n",(0,r.jsx)(n.h3,{id:"transfer-tokens",children:"Transfer tokens"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"transfer"})," method allows anyone holding ERC-20 tokens to transfer\nthem to any EVM address (user or contract one)."]}),"\n",(0,r.jsx)(n.p,{children:"In the following script, the minter address\nwill mint (implicitly) and transfer 10 WTM tokens to the spender address:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'task("transfer", "ERC-20 transfer")\n    .addParam("token", "Token address")\n    .addParam("spender", "Spender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, spender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [minter] = await ethers.getSigners();\n        await (await watermelon.connect(minter).transfer(spender, amount)).wait()\n        console.log(`${minter.address} has transferred ${amount} to ${spender}`);\n    });\n'})}),"\n",(0,r.jsx)(n.p,{children:"To call the task now, please use the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export $SPENDER_ADDRESS=HERE_GOES_THE_ADDRESS_TO_TRANSFER_TO\nnpx hardhat transfer --token $TOKEN_ADDRESS --amount 10 --spender $SPENDER_ADDRESS --network testnet_aurora\n"})}),"\n",(0,r.jsx)(n.h3,{id:"get-a-balance",children:"Get a balance"}),"\n",(0,r.jsxs)(n.p,{children:["We can prove that spender has received the exact amount of tokens by calling the ",(0,r.jsx)(n.code,{children:"balanceOf"})," as shown below:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'task("balanceOf", "Balance of ERC-20 token for particular user")\n.addParam("token", "Token address")\n.addParam("account", "Account address")\n.setAction(async function ({ token, account }, { ethers: { getSigners } }, runSuper) {\n  const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n  const watermelon = watermelonToken.attach(token)\n  const [minter] = await ethers.getSigners();\n  const balance = (await (await watermelon.connect(minter)).balanceOf(account)).toNumber()\n  console.log(`Account ${account} has a total token balance:  ${balance} WTM`);\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"To get a balance, use the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat balanceOf --token $TOKEN_ADDRESS --account $SPENDER_ADDRESS --network testnet_aurora\n"})}),"\n",(0,r.jsx)(n.h3,{id:"approve-and-transferfrom",children:"Approve and TransferFrom"}),"\n",(0,r.jsxs)(n.p,{children:["In some cases, instead of calling the ",(0,r.jsx)(n.code,{children:"transfer"})," directly, a sender\ncan approve a specific amount of tokens to be withdrawn from his account\nto the recipient's address later. This can be done by calling ",(0,r.jsx)(n.code,{children:"approve"})," and then calling ",(0,r.jsx)(n.code,{children:"transferFrom"})," method."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'task("approve", "ERC-20 approve")\n    .addParam("token", "Token address")\n    .addParam("spender", "Spender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, spender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [sender] = await ethers.getSigners();\n        await (await watermelon.connect(sender).approve(spender, amount)).wait()\n        console.log(`${sender.address} has approved ${amount} tokens to ${spender}`);\n    });\n\nmodule.exports = {};\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To call ",(0,r.jsx)(n.code,{children:"approve"}),", use the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx hardhat approve --token $TOKEN_ADDRESS --spender $SPENDER_ADDRESS --amount 10 --network testnet_aurora\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now, after approving tokens, a recipient can call ",(0,r.jsx)(n.code,{children:"transferFrom"})," to move\nthe ",(0,r.jsx)(n.code,{children:"allowance"})," to his account."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'task("transferFrom", "ERC-20 transferFrom")\n    .addParam("token", "Token address")\n    .addParam("sender", "Sender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, sender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [recipient] = await ethers.getSigners()\n        console.log(recipient.address);\n        await (await watermelon.connect(recipient).transferFrom(sender, recipient.address, amount)).wait()\n        console.log(`${recipient.address} has received ${amount} tokens from ${sender}`)\n    });\n'})}),"\n",(0,r.jsxs)(n.p,{children:["To call ",(0,r.jsx)(n.code,{children:"transferFrom"}),", use the following command:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# export the spender\'s private key\nexport AURORA_PRIVATE_KEY="THE RECIPIENT PRIVATE KEY"\nnpx hardhat transferFrom --token $TOKEN_ADDRESS --sender $MINTER_ADDRESS  --amount 10 --network testnet_aurora\n'})}),"\n",(0,r.jsx)(n.p,{children:"After this, you can check the balance of a recipient's account to make sure he has the tokens now."}),"\n",(0,r.jsx)(n.h2,{id:"switch-a-network",children:"Switch a network"}),"\n",(0,r.jsxs)(n.p,{children:["Optionally you can specify any of the following networks for any command: ",(0,r.jsx)(n.strong,{children:"testnet_aurora"}),", ",(0,r.jsx)(n.strong,{children:"mainnet_aurora"}),", ",(0,r.jsx)(n.strong,{children:"ropsten"})," like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ make deploy NETWORK=mainnet_aurora\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"In this tutorial, we have deployed an ERC-20 token using Hardhat on the Aurora\nTestnet, transferred, and approved ERC-20 tokens. Moreover, we have added other\nutility tasks such as getting the total supply, and the account balance."})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},7507:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(9474);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);