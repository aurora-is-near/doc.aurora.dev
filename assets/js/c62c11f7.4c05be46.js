"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[5227],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3314:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(1163),r=(n(9496),n(9613));const o={title:"ERC-20 Token"},l=void 0,s={unversionedId:"build-a-dapp/contracts/erc-20",id:"build-a-dapp/contracts/erc-20",title:"ERC-20 Token",description:"In this article, we will consider a bit more complex, yet standard example of an ERC-20 token contract.",source:"@site/docs/build-a-dapp/contracts/erc-20.md",sourceDirName:"build-a-dapp/contracts",slug:"/build-a-dapp/contracts/erc-20",permalink:"/build-a-dapp/contracts/erc-20",draft:!1,editUrl:"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/docs/build-a-dapp/contracts/erc-20.md",tags:[],version:"current",frontMatter:{title:"ERC-20 Token"},sidebar:"tutorialSidebar",previous:{title:"Simple Counter",permalink:"/build-a-dapp/contracts/counter"},next:{title:"ERC-721 NFT Token",permalink:"/build-a-dapp/contracts/nft"}},i={},c=[{value:"Create project",id:"create-project",level:2},{value:"Configure project",id:"configure-project",level:2},{value:"Deploy contract",id:"deploy-contract",level:2},{value:"Interact with contract",id:"interact-with-contract",level:2},{value:"Get total supply",id:"get-total-supply",level:3},{value:"Transfer tokens",id:"transfer-tokens",level:3},{value:"Get a balance",id:"get-a-balance",level:3},{value:"Approve and TransferFrom",id:"approve-and-transferfrom",level:3},{value:"Switch a network",id:"switch-a-network",level:2},{value:"Conclusion",id:"conclusion",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this article, we will consider a bit more complex, yet standard example of an ERC-20 token contract."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"In case you are not familiar with a standard we advise you to read more about it on the OpenZeppelin website:\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/5.x/erc20"},"ERC-20 article")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/contracts/5.x/api/token/erc20"},"ERC-20 API"),".")),(0,r.kt)("p",null,"Here is the full contract code below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity",metastring:'title="contracts/WatermelonToken.sol"',title:'"contracts/WatermelonToken.sol"'},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport "@openzeppelin/contracts/token/ERC20/ERC20.sol";\n\ncontract WatermelonToken is ERC20 {\n    constructor(uint256 initialSupply) ERC20("Watermelon", "WTM") {\n        _mint(msg.sender, initialSupply);\n    }\n\n    function decimals() public pure override(ERC20) returns (uint8) {\n        return 0;\n    }\n}\n')),(0,r.kt)("p",null,"As you can see, the implementation is just as simple as inheriting from OpenZeppelin's ERC20 contract.\nNotice two modifications done to the standard implementation:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"During the construction, all of the ",(0,r.kt)("inlineCode",{parentName:"li"},"initialSupply")," is minted to the contract deployer."),(0,r.kt)("li",{parentName:"ul"},"Decimals are set to zero.")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can find ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/aurora-is-near/aurora-examples/blob/main/hardhat/erc20/"},"a GitHub repo here"),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://dev.aurora.dev/ecosystem/hardhat"},"another version of this tutorial")," on Aurora Developer Portal.")),(0,r.kt)("h2",{id:"create-project"},"Create project"),(0,r.kt)("p",null,"To create a project, clone the examples repository and go to ",(0,r.kt)("inlineCode",{parentName:"p"},"erc-20")," folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/aurora-is-near/aurora-examples.git\ncd aurora-examples/hardhat/erc20/\nyarn install\n")),(0,r.kt)("h2",{id:"configure-project"},"Configure project"),(0,r.kt)("p",null,"Add your Aurora Private key (from MetaMask or other Web3 wallet) to ",(0,r.kt)("inlineCode",{parentName:"p"},"__.env__")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'$ echo "AURORA_PRIVATE_KEY=YOUR_AURORA_PRIVATE_KEY_HERE" >> .env\n')),(0,r.kt)("h2",{id:"deploy-contract"},"Deploy contract"),(0,r.kt)("p",null,"This example is about a naive Watermelon token \ud83c\udf49. The total supply is 1,000,000, the\nminter is the contract deployer address, and the decimals are 0, so one token is one non-divisible watermelon."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"To use the commands below you will need Node.js and ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," to be installed. Please follow the ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/en/download/package-manager"},"instructions here")," to install Node.js.\nThen, install ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"npm install --global yarn")," or read more ",(0,r.kt)("a",{parentName:"p",href:"https://classic.yarnpkg.com/lang/en/docs/install/"},"here"),".")),(0,r.kt)("p",null,"To deploy the token contract, use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"make deploy NETWORK=testnet_aurora\n")),(0,r.kt)("p",null,"You will see the next output with your Token Address on your screen:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn hardhat run scripts/deploy.js --network testnet_aurora\nyarn run v1.22.10\n\nDeploying contracts with the account: 0x6A33382de9f73B846878a57500d055B981229ac4\nAccount balance: 2210010200000000000\nWatermelonToken deployed to: 0xD7f2A76F5DA173043E6c61a0A18D835809A07766\n\u2728  Done in 14.96s.\n")),(0,r.kt)("p",null,"You should also export your Token Address as an environment variable to re-use later during CLI interactions with the contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# export the token address\nexport TOKEN_ADDRESS='YOUR OUTPUT FROM DEPLOY (e.g. 0xD7f2A76F5DA173043E6c61a0A18D835809A07766)'\n")),(0,r.kt)("h2",{id:"interact-with-contract"},"Interact with contract"),(0,r.kt)("p",null,"We will use Hardhat tasks to take care of parsing the values provided for each parameter.\nIt gets the values, performs the type validation and converts them into your desired type."),(0,r.kt)("p",null,"In this example, we will go through a set of predefined Hardhat tasks that use the ",(0,r.kt)("a",{parentName:"p",href:"https://hardhat.org/advanced/hardhat-runtime-environment.html"},"Hardhat Runtime Environment"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The Hardhat Runtime Environment is an object containing all the functionality that Hardhat exposes when running a task, test or script. In reality, Hardhat is the HRE."),(0,r.kt)("p",{parentName:"admonition"},"To communicate with contracts from UI you will need a web3-library like ",(0,r.kt)("a",{parentName:"p",href:"https://viem.sh/docs/introduction"},"viem"),", ",(0,r.kt)("a",{parentName:"p",href:"https://docs.ethers.org/"},"ethers.js")," or ",(0,r.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io/en"},"web3.js"),".\nHardhat uses ethers.js by default.")),(0,r.kt)("p",null,"If you want to complete all steps of this tutorial, you should execute the tasks in the same order they are mentioned below.\nBut if you want just take a look at how to interact with some particular method - you can just use the code snippet as is."),(0,r.kt)("h3",{id:"get-total-supply"},"Get total supply"),(0,r.kt)("p",null,"The following task script gets the total supply of the Watermelon ERC-20 token.\nFirst, it gets the token contract, then gets the sender address and then retrieves the total supply\nby calling ",(0,r.kt)("inlineCode",{parentName:"p"},"totalSupply()")," method in our ERC-20 contract:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'task("totalSupply", "Total supply of ERC-20 token")\n.addParam("token", "Token address")\n.setAction(async function ({ token }, { ethers: { getSigners } }, runSuper) {\n  const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n  const watermelon = watermelonToken.attach(token)\n  const [minter] = await ethers.getSigners();\n  const totalSupply = (await (await watermelon.connect(minter)).totalSupply()).toNumber()\n  console.log(`Total Supply is ${totalSupply}`);\n});\n')),(0,r.kt)("p",null,"To get the total supply, just use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat totalSupply --token $TOKEN_ADDRESS --network testnet_aurora\n")),(0,r.kt)("h3",{id:"transfer-tokens"},"Transfer tokens"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer")," method allows anyone holding ERC-20 tokens to transfer\nthem to any EVM address (user or contract one)."),(0,r.kt)("p",null,"In the following script, the minter address\nwill mint (implicitly) and transfer 10 WTM tokens to the spender address:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'task("transfer", "ERC-20 transfer")\n    .addParam("token", "Token address")\n    .addParam("spender", "Spender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, spender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [minter] = await ethers.getSigners();\n        await (await watermelon.connect(minter).transfer(spender, amount)).wait()\n        console.log(`${minter.address} has transferred ${amount} to ${spender}`);\n    });\n')),(0,r.kt)("p",null,"To call the task now, please use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export $SPENDER_ADDRESS=HERE_GOES_THE_ADDRESS_TO_TRANSFER_TO\nnpx hardhat transfer --token $TOKEN_ADDRESS --amount 10 --spender $SPENDER_ADDRESS --network testnet_aurora\n")),(0,r.kt)("h3",{id:"get-a-balance"},"Get a balance"),(0,r.kt)("p",null,"We can prove that spender has received the exact amount of tokens by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"balanceOf")," as shown below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'task("balanceOf", "Balance of ERC-20 token for particular user")\n.addParam("token", "Token address")\n.addParam("account", "Account address")\n.setAction(async function ({ token, account }, { ethers: { getSigners } }, runSuper) {\n  const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n  const watermelon = watermelonToken.attach(token)\n  const [minter] = await ethers.getSigners();\n  const balance = (await (await watermelon.connect(minter)).balanceOf(account)).toNumber()\n  console.log(`Account ${account} has a total token balance:  ${balance} WTM`);\n});\n')),(0,r.kt)("p",null,"To get a balance, use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat balanceOf --token $TOKEN_ADDRESS --account $SPENDER_ADDRESS --network testnet_aurora\n")),(0,r.kt)("h3",{id:"approve-and-transferfrom"},"Approve and TransferFrom"),(0,r.kt)("p",null,"In some cases, instead of calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer")," directly, a sender\ncan approve a specific amount of tokens to be withdrawn from his account\nto the recipient's address later. This can be done by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"approve")," and then calling ",(0,r.kt)("inlineCode",{parentName:"p"},"transferFrom")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'task("approve", "ERC-20 approve")\n    .addParam("token", "Token address")\n    .addParam("spender", "Spender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, spender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [sender] = await ethers.getSigners();\n        await (await watermelon.connect(sender).approve(spender, amount)).wait()\n        console.log(`${sender.address} has approved ${amount} tokens to ${spender}`);\n    });\n\nmodule.exports = {};\n')),(0,r.kt)("p",null,"To call ",(0,r.kt)("inlineCode",{parentName:"p"},"approve"),", use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx hardhat approve --token $TOKEN_ADDRESS --spender $SPENDER_ADDRESS --amount 10 --network testnet_aurora\n")),(0,r.kt)("p",null,"Now, after approving tokens, a recipient can call ",(0,r.kt)("inlineCode",{parentName:"p"},"transferFrom")," to move\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"allowance")," to his account."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'task("transferFrom", "ERC-20 transferFrom")\n    .addParam("token", "Token address")\n    .addParam("sender", "Sender address")\n    .addParam("amount", "Token amount")\n    .setAction(async function ({ token, sender, amount }, { ethers: { getSigners } }, runSuper) {\n        const watermelonToken = await ethers.getContractFactory("WatermelonToken")\n        const watermelon = watermelonToken.attach(token)\n        const [recipient] = await ethers.getSigners()\n        console.log(recipient.address);\n        await (await watermelon.connect(recipient).transferFrom(sender, recipient.address, amount)).wait()\n        console.log(`${recipient.address} has received ${amount} tokens from ${sender}`)\n    });\n')),(0,r.kt)("p",null,"To call ",(0,r.kt)("inlineCode",{parentName:"p"},"transferFrom"),", use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'# export the spender\'s private key\nexport AURORA_PRIVATE_KEY="THE RECIPIENT PRIVATE KEY"\nnpx hardhat transferFrom --token $TOKEN_ADDRESS --sender $MINTER_ADDRESS  --amount 10 --network testnet_aurora\n')),(0,r.kt)("p",null,"After this, you can check the balance of a recipient's account to make sure he has the tokens now."),(0,r.kt)("h2",{id:"switch-a-network"},"Switch a network"),(0,r.kt)("p",null,"Optionally you can specify any of the following networks for any command: ",(0,r.kt)("strong",{parentName:"p"},"testnet_aurora"),", ",(0,r.kt)("strong",{parentName:"p"},"mainnet_aurora"),", ",(0,r.kt)("strong",{parentName:"p"},"ropsten")," like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ make deploy NETWORK=mainnet_aurora\n")),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In this tutorial, we have deployed an ERC-20 token using Hardhat on the Aurora\nTestnet, transferred, and approved ERC-20 tokens. Moreover, we have added other\nutility tasks such as getting the total supply, and the account balance."))}u.isMDXComponent=!0}}]);