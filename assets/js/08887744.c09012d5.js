"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[9954],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(9496);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),h=r,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2600:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var a=n(1163),r=(n(9496),n(9613));const o={title:"Send transactions"},i=void 0,s={unversionedId:"build-a-dapp/frontend/transactions",id:"build-a-dapp/frontend/transactions",title:"Send transactions",description:"In this article, we will teach you how to send transactions in Wagmi. We will re-use the project from the Connect Wallet guide",source:"@site/docs/build-a-dapp/frontend/transactions.md",sourceDirName:"build-a-dapp/frontend",slug:"/build-a-dapp/frontend/transactions",permalink:"/build-a-dapp/frontend/transactions",draft:!1,editUrl:"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/docs/build-a-dapp/frontend/transactions.md",tags:[],version:"current",frontMatter:{title:"Send transactions"},sidebar:"tutorialSidebar",previous:{title:"Get account data",permalink:"/build-a-dapp/frontend/account"},next:{title:"Read contract",permalink:"/build-a-dapp/frontend/read-contract"}},c={},l=[{value:"Code Example",id:"code-example",level:2},{value:"useSendTransaction hook",id:"usesendtransaction-hook",level:2},{value:"useWaitForTransactionReceipt hook",id:"usewaitfortransactionreceipt-hook",level:2},{value:"Your transaction in Explorer",id:"your-transaction-in-explorer",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,a.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In this article, we will teach you how to send transactions in Wagmi. We will re-use the project from the ",(0,r.kt)("a",{parentName:"p",href:"/build-a-dapp/frontend/connect-wallet"},"Connect Wallet guide"),"\nand use the ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useSendTransaction"},"useSendTransaction")," and ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useWaitForTransactionReceipt"},"useWaitForTransactionReceipt")," hooks."),(0,r.kt)("h2",{id:"code-example"},"Code Example"),(0,r.kt)("p",null,"We will focus our attention on the ",(0,r.kt)("inlineCode",{parentName:"p"},"SendTransaction")," component, which is essentially just an HTML Form allowing us to send some ETH to other accounts:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"dapp_eth_form",src:n(8484).Z,width:"1198",height:"280"})),(0,r.kt)("p",null,'After you enter the values into it and click the "Send" button \u2013 you will get a transaction to sign in your wallet and a link to the ',(0,r.kt)("a",{parentName:"p",href:"https://explorer.testnet.aurora.dev/"},"Explorer"),"\nwith the transaction hash will appear below that form."),(0,r.kt)("p",null,"Let's take a look at the code sandbox here:"),(0,r.kt)("iframe",{width:"700",height:"500",src:"https://stackblitz.com/edit/vitejs-vite-muf79v?embed=1&file=src%2FApp.tsx,src%2Fcomponents%2FSendTransaction.tsx&view=editor",style:{display:"block",margin:"auto"},title:"Connect wallet",frameborder:"auto",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"usesendtransaction-hook"},"useSendTransaction hook"),(0,r.kt)("p",null,"To send a transaction you will need to use ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useSendTransaction"},"useSendTransaction")," hook like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"[components/SendTransaction.tsx]","[components/SendTransaction.tsx]":!0},'import { useSendTransaction } from \'wagmi\';\n\nexport function YourComponent() {\n  const {\n    data: hash, // transaction hash\n    error, // used to catch some errors\n    isPending, // check if the transaction is in Pending state\n    sendTransaction, // function to call to send a transaction\n  } = useSendTransaction();\n\n  ...\n  async function submit(e: FormEvent<HTMLFormElement>) {\n    ...\n    sendTransaction({ to, value: parseEther(value) });\n  }\n\n  ...\n  return\n      //calling sendTransaction function onSubmit\n    <form className="set" onSubmit={submit}>\n      <input name="address" placeholder="Address" required />\n      <input name="value" ... required/>\n    </form>\n}\n')),(0,r.kt)("p",null," The main actor here is ",(0,r.kt)("inlineCode",{parentName:"p"},"sendTransaction")," function. You can read more about its parameters ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/core/api/actions/sendTransaction"},"here"),".\nYou can also pass ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/core/api/actions/sendTransaction#data"},"data")," argument to it to call a contract write method.\nPlease read more about how to encode that field ",(0,r.kt)("a",{parentName:"p",href:"https://ethereum.org/en/developers/docs/transactions/#the-data-field"},"in the official Ethereum docs"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"You can read more about catching errors and using transaction statuses in the ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/guides/send-transaction"},"official Wagmi guide"),".\nOr just read the code example in StackBlitz widget above.")),(0,r.kt)("h2",{id:"usewaitfortransactionreceipt-hook"},"useWaitForTransactionReceipt hook"),(0,r.kt)("p",null,"After sending a transaction - we need to wait to it to be finalized or, in other words, wait for the receipt.\nThat is the moment we will want to use ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useWaitForTransactionReceipt"},"useWaitForTransactionReceipt")," hook."),(0,r.kt)("p",null,"The usage example could look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"[components/SendTransaction.tsx]","[components/SendTransaction.tsx]":!0},"import { useWaitForTransactionReceipt } from 'wagmi';\n\nexport function YourComponent() {\n  const {\n    data: hash, // transaction hash\n    ...\n  } = useSendTransaction();\n\n  const { data: receiptData, isLoading: isConfirming, isSuccess: isConfirmed } =\n    useWaitForTransactionReceipt({\n      hash, // the hash from SendTransaction hook is used here\n    });\n\n  ...\n  return\n      //using isConfirming and isConfirmed statuses in UI to track progress\n      <>\n      {isConfirming && <div>Waiting for confirmation...</div>}\n        {isConfirmed && <div>Transaction confirmed.</div>}\n      </>\n}\n")),(0,r.kt)("p",null,"When a transaction is accepted and included in a block you can find the receipt information in the ",(0,r.kt)("a",{parentName:"p",href:"https://wagmi.sh/react/api/hooks/useWaitForTransactionReceipt#data"},"data")," field."),(0,r.kt)("h2",{id:"your-transaction-in-explorer"},"Your transaction in Explorer"),(0,r.kt)("p",null,"After the transaction will be processed, you will get a link to the Explorer page with all information about it:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"dapp_tx_sent",src:n(5234).Z,width:"1676",height:"368"})),(0,r.kt)("p",null,"If you ",(0,r.kt)("a",{parentName:"p",href:"https://explorer.testnet.aurora.dev/tx/0x0b94a546ffc3754015e01980519763ef43428d876e4c423c2ba9c2d1ba6b2249"},"click on it"),", you will get an Explorer window opened in a new tab:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"dapp_explorer_sendtx",src:n(3285).Z,width:"2444",height:"1114"})),(0,r.kt)("p",null,"You will see all the info about the transaction there and can also track your activity there."))}u.isMDXComponent=!0},8484:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dapp_eth_form-cfeb0c83dcceea285c02ce445dc87249.png"},3285:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dapp_explorer_sendtx-47c90b0c3e2dcd0de68fe2ce53809202.png"},5234:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/dapp_tx_sent-d6d1541ee0d301462e4ab57c0c5f0923.png"}}]);