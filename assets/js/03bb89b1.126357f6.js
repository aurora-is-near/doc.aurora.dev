"use strict";(self.webpackChunkaurora_docs=self.webpackChunkaurora_docs||[]).push([[2114],{1320:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=r(3274),n=r(7507);const o={title:"How the Aurora Relayer 2.0 works?",description:"Learn about Aurora's relayer inner workings and how those innovate the future of the blockchain technologies",date:"2023-03-31",authors:["oleksii_krasynskyi"],tags:["core_tech"],image:"https://www.datocms-assets.com/95026/1682082014-relayer-article-cover.png"},s=void 0,i={permalink:"/blog/aurora-relayer-2-0",editUrl:"https://github.com/aurora-is-near/doc.aurora.dev/edit/master/blog/aurora-relayer-2-0.md",source:"@site/blog/aurora-relayer-2-0.md",title:"How the Aurora Relayer 2.0 works?",description:"Learn about Aurora's relayer inner workings and how those innovate the future of the blockchain technologies",date:"2023-03-31T00:00:00.000Z",tags:[{inline:!1,label:"Core Tech",permalink:"/blog/tags/core_tech",description:"Posts about core technologies on Aurora"}],readingTime:3.34,hasTruncateMarker:!0,authors:[{name:"Oleksii Krasynskyi",title:"Head of Infrastructure",imageURL:"https://www.datocms-assets.com/95026/1726603153-screenshot-2024-09-17-at-20-59-04.png",key:"oleksii_krasynskyi",page:null}],frontMatter:{title:"How the Aurora Relayer 2.0 works?",description:"Learn about Aurora's relayer inner workings and how those innovate the future of the blockchain technologies",date:"2023-03-31",authors:["oleksii_krasynskyi"],tags:["core_tech"],image:"https://www.datocms-assets.com/95026/1682082014-relayer-article-cover.png"},unlisted:!1,prevItem:{title:"Cross-Ecosystem Communication",permalink:"/blog/cross-ecosystem-communication"},nextItem:{title:"How to get NEAR transaction from the Aurora\u2019s one?",permalink:"/blog/convert-aurora-transaction-into-near-s-one"}},l={authorsImageUrls:[void 0]},c=[{value:"<strong>Relayer 2.0</strong>",id:"relayer-20",level:3},{value:"<strong>The JSON-RPC</strong>",id:"the-json-rpc",level:4},{value:"<strong>The Database</strong>",id:"the-database",level:4},{value:"<strong>The Indexer</strong>",id:"the-indexer",level:4},{value:"<strong>And more\u2026</strong>",id:"and-more",level:4},{value:"<strong>The Future of User Experience</strong>",id:"the-future-of-user-experience",level:3}];function d(e){const t={a:"a",br:"br",code:"code",em:"em",h3:"h3",h4:"h4",img:"img",p:"p",strong:"strong",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"In the blockchain world, relayers are off-chain facilitators of data exchange and transactions between blockchain networks and/or layers. They are used primarily in decentralized finance applications, cross-chain communication, and Layer 2 solutions, like sidechains or state channels. In general, relayers listen for events and transactions from one point and then submit the corresponding data or transactions to another. For that, they can charge fees for their services, incentivizing them to operate and maintain their infrastructure."}),"\n",(0,a.jsx)(t.p,{children:"Initially developed in-house at NEAR, the Aurora EVM is the official EVM for the NEAR ecosystem. Powered by the SputnikVM, it accomplishes a 1:1 experience with the Ethereum protocol."}),"\n",(0,a.jsxs)(t.p,{children:["This compatibility between Aurora and Ethereum is achieved by the ",(0,a.jsx)(t.strong,{children:"Aurora Relayer"}),", a JSON-RPC compatible server with Ethereum's ",(0,a.jsx)(t.a,{href:"https://eth.wiki/json-rpc/API",children:"Web3 API"})," for the ",(0,a.jsx)(t.a,{href:"https://github.com/aurora-is-near/aurora-engine",children:"Aurora Engine"}),"It has its own internal database to serve multiple read methods and an indexer that is constantly following the head and indexing blocks, transactions and logs to that internal database."]}),"\n",(0,a.jsx)(t.h3,{id:"relayer-20",children:(0,a.jsx)(t.strong,{children:"Relayer 2.0"})}),"\n",(0,a.jsx)(t.p,{children:"As mentioned above, the Aurora Relayer has two main components. First, an implementation of Ethereum\u2019s JSON-RPC specification\u2014a standard collection of methods that all clients must implement and the canonical interface between users and the Ethereum network\u2014on Aurora\u2019s Ethereum Virtual Machine (EVM), a.k.a. the Aurora Engine. Second, an indexer that continuously reads the NEAR network for blocks and other relevant information relevant to Aurora."}),"\n",(0,a.jsxs)(t.p,{children:["The Relayer had ",(0,a.jsx)(t.a,{href:"https://github.com/aurora-is-near/aurora-relayer",children:"its first version"})," deployed in October 2021. Developed in Typescript and JavaScript. It has been deprecated and replaced by ",(0,a.jsx)(t.a,{href:"https://github.com/aurora-is-near/relayer2-public",children:"version 2.0"}),", with a JSON-RPC server written in go-lang and the indexer developed in go-lang and rust."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://www.datocms-assets.com/95026/1680267251-relayer-10.png",alt:""})}),"\n",(0,a.jsx)(t.p,{children:"Relayer 2.0 was motivated by the necessity of migrating from JavaScript to a more reliable language like golang that is designed for concurrency and is particularly good at managing multiple connections and resource-intensive tasks, making it very well-suited for the type of high-performance RPC systems required in blockchains."}),"\n",(0,a.jsxs)(t.p,{children:["Additionally, it required migrating to a more efficient database system, so it was migrated from ",(0,a.jsx)(t.code,{children:"PostgreSQL"})," to ",(0,a.jsx)(t.code,{children:"badger-db"})," an embedded key-value database. As a result, there is now a relayer with faster execution speed,  lower machine resource usage, and lower data latency that is easier to code, debug, optimize, and deploy. Now, let\u2019s have a general overview of some of the internals of the Relayer."]}),"\n",(0,a.jsx)(t.h4,{id:"the-json-rpc",children:(0,a.jsx)(t.strong,{children:"The JSON-RPC"})}),"\n",(0,a.jsxs)(t.p,{children:["Written in go-lang, it exposes endpoints that implement the methods of Ethereum\u2019s JSON-RPC protocol, commonly known as the Web3 API. This middleware leverages a messaging system that forwards JSON-PRC calls to the NEAR network and vice versa. Its source code is open and available to developers, contributors, and anyone who would like to build, run and experiment with it natively. A list of all the implemented methods and the server's source code can be found in the GitHub ",(0,a.jsx)(t.a,{href:"https://github.com/aurora-is-near/relayer2-public",children:(0,a.jsx)(t.em,{children:"repo"})}),". Also, there is a standalone version available ",(0,a.jsx)(t.a,{href:"https://github.com/aurora-is-near/standalone-rpc",children:(0,a.jsx)(t.em,{children:"here"})}),"."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://www.datocms-assets.com/95026/1680267260-relayer-20.png",alt:""})}),"\n",(0,a.jsx)(t.h4,{id:"the-database",children:(0,a.jsx)(t.strong,{children:"The Database"})}),"\n",(0,a.jsxs)(t.p,{children:["Embedded databases are a better choice for applications that don't require complex querying planning, as it provides a lightweight solution with fewer dependencies. They are also well-suited for applications that benefit from local data storage with low latency and need single-process concurrency for concurrent read and write operations without external coordination.",(0,a.jsx)(t.br,{}),"\n",(0,a.jsx)(t.br,{}),"\n","BadgerDB\u2014our database of choice\u2014is an embeddable, persistent, fast key-value (KV) database written in pure Go. It is ideal for JSON-RPC servers as most methods grab data by key while benefitting from better data compression and lower latency. In addition, other teams inside Aurora are also using it, therefore, the required competencies and know-how were already there."]}),"\n",(0,a.jsx)(t.h4,{id:"the-indexer",children:(0,a.jsx)(t.strong,{children:"The Indexer"})}),"\n",(0,a.jsxs)(t.p,{children:["The new embedded indexer continuously reads JSON files generated by the ",(0,a.jsx)(t.a,{href:"https://github.com/aurora-is-near/borealis-engine-lib",children:"Aurora Refiner"})," that populate a local database. The refiner allows users to download all NEAR Blocks and get all information relevant to Aurora."]}),"\n",(0,a.jsxs)(t.p,{children:["NEAR Blocks data can be consumed from two different sources: the ",(0,a.jsx)(t.a,{href:"https://docs.near.org/concepts/advanced/near-lake-framework",children:"NEAR data lake"}),"\u2014 a repository of blocks and events from the NEAR network as JSON files on AWS \u2014 and an archival instance, ",(0,a.jsx)(t.a,{href:"https://github.com/near/nearcore",children:"the NEARCore"}),". In general, Aurora Relayer infrastructure implements an indexer of NEAR blocks, an indexer of blocks from ",(0,a.jsx)(t.code,{children:"tar"})," backups and an indexer of pre-history blocks (height < 34 mln). An open-source repository for the Aurora Refiner can be found ",(0,a.jsx)(t.a,{href:"https://github.com/aurora-is-near/borealis-engine-lib",children:(0,a.jsx)(t.em,{children:"here"})}),"."]}),"\n",(0,a.jsx)(t.h4,{id:"and-more",children:(0,a.jsx)(t.strong,{children:"And more\u2026"})}),"\n",(0,a.jsx)(t.p,{children:"In addition, and due to the nature of Aurora\u2019s relayer infrastructure and its interactions with the NEAR network, it was possible to upgrade our internal infrastructure to use our relayer with additions that allow the implementation\u2013among other things\u2013of complex multi-tenant, rule-based accounting systems that support virtually any possible way to account for transactions, to enforce gas prices, pre- or post-run transactions, etc."}),"\n",(0,a.jsx)(t.p,{children:"So it is possible to have users with prepaid fees, prepaid gas, no gas, and many other configurations for distributing gas and fees between relayers, users, and owners of smart contracts. This means that anyone willing to spin a relayer will have access to more sophisticated economic mechanisms for its users or on behalf of others, thus acting the same way ERC-4337 bundlers do, i.e., as validators who earn incentives for completing transactions."}),"\n",(0,a.jsx)(t.h3,{id:"the-future-of-user-experience",children:(0,a.jsx)(t.strong,{children:"The Future of User Experience"})}),"\n",(0,a.jsx)(t.p,{children:"By improving efficiency and reliability and by adding innovative functionality into the relayer, Aurora builders and developers can offer faster, more robust applications and significant improvements to the user\u2019s experience where \u2014 among other things \u2014 per-transaction fees could be eliminated and accounts could be detached from keys."}),"\n",(0,a.jsx)(t.p,{children:"Therefore, the Aurora Relayer stands as a groundbreaking innovation in the world of decentralised blockchain technologies. Furthermore, as we continue to see rapid advancements and increasing adoption, the Aurora Relayer sets the stage for a more interconnected and efficient future with the potential to unlock unprecedented levels of usability, scalability, security, and cost-effectiveness, ultimately contributing to a more accessible landscape for all types of users."}),"\n",(0,a.jsx)(t.p,{children:"If you are interested in getting to know Aurora Relayers in more depth, in our next post, we will teach you how to modify and launch a stand-alone version of the relayer that can be called by a smart contract that can execute functions without charging gas to its callers, stay tuned!"})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},7507:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>i});var a=r(9474);const n={},o=a.createContext(n);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);